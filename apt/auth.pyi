"""
This type stub file was generated by pyright.
"""

from typing import List

"""
This type stub file was generated by pyright.
"""
class AptKeyError(Exception):
    ...


class AptKeyIDTooShortError(AptKeyError):
    """Internal class do not rely on it."""
    ...


class TrustedKey:
    """Represents a trusted key."""
    def __init__(self, name: str, keyid: str, date: str) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


def add_key_from_file(filename: str) -> None:
    """Import a GnuPG key file to trust repositores signed by it.

    Keyword arguments:
    filename -- the absolute path to the public GnuPG key file
    """
    ...

def add_key_from_keyserver(keyid: str, keyserver: str) -> None:
    """Import a GnuPG key file to trust repositores signed by it.

    Keyword arguments:
    keyid -- the long keyid (fingerprint) of the key, e.g.
             A1BD8E9D78F7FE5C3E65D8AF8B48AD6246925553
    keyserver -- the URL or hostname of the key server
    """
    ...

def add_key(content: str) -> None:
    """Import a GnuPG key to trust repositores signed by it.

    Keyword arguments:
    content -- the content of the GnuPG public key
    """
    ...

def remove_key(fingerprint: str) -> None:
    """Remove a GnuPG key to no longer trust repositores signed by it.

    Keyword arguments:
    fingerprint -- the fingerprint identifying the key
    """
    ...

def export_key(fingerprint: str) -> str:
    """Return the GnuPG key in text format.

    Keyword arguments:
    fingerprint -- the fingerprint identifying the key
    """
    ...

def update() -> str:
    """Update the local keyring with the archive keyring and remove from
    the local keyring the archive keys which are no longer valid. The
    archive keyring is shipped in the archive-keyring package of your
    distribution, e.g. the debian-archive-keyring package in Debian.
    """
    ...

def net_update() -> str:
    """Work similar to the update command above, but get the archive
    keyring from an URI instead and validate it against a master key.
    This requires an installed wget(1) and an APT build configured to
    have a server to fetch from and a master keyring to validate. APT
    in Debian does not support this command and relies on update
    instead, but Ubuntu's APT does.
    """
    ...

def list_keys() -> List[TrustedKey]:
    """Returns a list of TrustedKey instances for each key which is
    used to trust repositories.
    """
    ...

if __name__ == "__main__":
    ...
