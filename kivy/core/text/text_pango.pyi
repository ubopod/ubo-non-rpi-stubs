"""
This type stub file was generated by pyright.
"""

from kivy.core.text import FontContextManagerBase, LabelBase

'''
Pango text provider
===================

.. versionadded:: 1.11.0

.. warning::
    The low-level Pango API is experimental, and subject to change without
    notice for as long as this warning is present.


Installation
------------

1. Install pangoft2 (`apt install libfreetype6-dev libpango1.0-dev
   libpangoft2-1.0-0`) or ensure it is available in pkg-config
2. Recompile kivy. Check that pangoft2 is found `use_pangoft2 = 1`
3. Test it! Enforce the text core renderer to pango using environment variable:
   `export KIVY_TEXT=pango`

This has been tested on OSX and Linux, Python 3.6.


Font context types for FontConfig+FreeType2 backend
---------------------------------------------------

* `system://` - `FcInitLoadConfigAndFonts()`
* `systemconfig://` - `FcInitLoadConfig()`
* `directory://<PATH>` - `FcInitLoadConfig()` + `FcAppFontAddDir()`
* `fontconfig://<PATH>` - `FcConfigCreate()` + `FcConfigParseAndLoad()`
* Any other context name - `FcConfigCreate()`


Low-level Pango access
----------------------

Since Kivy currently does its own text layout, the Label and TextInput widgets
do not take full advantage of Pango. For example, line breaks do not take
language/script into account, and switching alignment per paragraph (for bi-
directional text) is not supported. For advanced i18n requirements, we provide
a simple wrapper around PangoLayout that you can use to render text.

* https://developer.gnome.org/pango/1.40/pango-Layout-Objects.html
* https://developer.gnome.org/pango/1.40/PangoMarkupFormat.html
* See the `kivy/core/text/_text_pango.pyx` file @ `cdef class KivyPangoLayout`
  for more information. Not all features of PangoLayout are implemented.

.. python::
    from kivy.core.window import Window  # OpenGL must be initialized
    from kivy.core.text._text_pango import KivyPangoLayout
    layout = KivyPangoLayout('system://')
    layout.set_markup('<span font="20">Hello <b>World!</b></span>')
    tex = layout.render_as_Texture()


Known limitations
-----------------

* Pango versions older than v1.38 has not been tested. It may work on
  some systems with older pango and newer FontConfig/FreeType2 versions.
* Kivy's text layout is used, not Pango. This means we do not use Pango's
  line-breaking feature (which is superior to Kivy's), and we can't use
  Pango's bidirectional cursor helpers in TextInput.
* Font family collisions can happen. For example, if you use a `system://`
  context and add a custom `Arial.ttf`, using `arial` as the `font_family`
  may or may not draw with your custom font (depending on whether or not
  there is already a system-wide "arial" font installed)
* Rendering is inefficient; the normal way to integrate Pango would be
  using a dedicated PangoLayout per widget. This is not currently practical
  due to missing abstractions in Kivy core (in the current implementation,
  we have a dedicated PangoLayout *per font context,* which is rendered
  once for each LayoutWord)
'''
__all__ = ('LabelPango', )
class LabelPango(LabelBase):
    _font_family_support = ...
    def __init__(self, *largs, **kwargs) -> None:
        ...
    
    find_base_direction = ...


class PangoFontContextManager(FontContextManagerBase):
    create = ...
    exists = ...
    destroy = ...
    list = ...
    list_families = ...
    list_custom = ...
    @staticmethod
    def add_font(font_context, filename, autocreate=..., family=...):
        ...
    


