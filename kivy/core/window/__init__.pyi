"""
This type stub file was generated by pyright.
"""

from os.path import exists, join
from os import getcwd
from collections import defaultdict
from kivy.core import core_select_lib
from kivy.clock import Clock
from kivy.config import Config
from kivy.logger import Logger
from kivy.base import EventLoop, stopTouchApp
from kivy.modules import Modules
from kivy.event import EventDispatcher
from kivy.properties import AliasProperty, BooleanProperty, ColorProperty, ListProperty, NumericProperty, ObjectProperty, OptionProperty, StringProperty
from kivy.utils import deprecated, pi_version, platform, reify
from kivy.context import get_current_context
from kivy.uix.behaviors import FocusBehavior
from kivy.setupconfig import USE_SDL2
from kivy.graphics.transformation import Matrix
from kivy.graphics.cgl import cgl_get_backend_name

'''
Window
======

Core class for creating the default Kivy window. Kivy supports only one window
per application: please don't try to create more than one.
'''
__all__ = ('Keyboard', 'WindowBase', 'Window')
VKeyboard = ...
android = ...
Animation = ...
class Keyboard(EventDispatcher):
    '''Keyboard interface that is returned by
    :meth:`WindowBase.request_keyboard`. When you request a keyboard,
    you'll get an instance of this class. Whatever the keyboard input is
    (system or virtual keyboard), you'll receive events through this
    instance.

    :Events:
        `on_key_down`: keycode, text, modifiers
            Fired when a new key is pressed down
        `on_key_up`: keycode
            Fired when a key is released (up)

    Here is an example of how to request a Keyboard in accordance with the
    current configuration:

    .. include:: ../../examples/widgets/keyboardlistener.py
        :literal:

    '''
    keycodes = ...
    __events__ = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def on_key_down(self, keycode, text, modifiers): # -> None:
        ...
    
    def on_key_up(self, keycode): # -> None:
        ...
    
    def on_textinput(self, text): # -> None:
        ...
    
    def release(self): # -> None:
        '''Call this method to release the current keyboard.
        This will ensure that the keyboard is no longer attached to your
        callback.'''
        ...
    
    def string_to_keycode(self, value): # -> int:
        '''Convert a string to a keycode number according to the
        :attr:`Keyboard.keycodes`. If the value is not found in the
        keycodes, it will return -1.
        '''
        ...
    
    def keycode_to_string(self, value): # -> str:
        '''Convert a keycode number to a string according to the
        :attr:`Keyboard.keycodes`. If the value is not found in the
        keycodes, it will return ''.
        '''
        ...
    


class WindowBase(EventDispatcher):
    '''WindowBase is an abstract window widget for any window implementation.

    :Parameters:
        `borderless`: str, one of ('0', '1')
            Set the window border state. Check the
            :mod:`~kivy.config` documentation for a
            more detailed explanation on the values.
        `custom_titlebar`: str, one of ('0', '1')
            Set to `'1'` to uses a custom titlebar
        `fullscreen`: str, one of ('0', '1', 'auto', 'fake')
            Make the window fullscreen. Check the
            :mod:`~kivy.config` documentation for a
            more detailed explanation on the values.
        `width`: int
            Width of the window.
        `height`: int
            Height of the window.
        `minimum_width`: int
            Minimum width of the window (only works for sdl2 window provider).
        `minimum_height`: int
            Minimum height of the window (only works for sdl2 window provider).
        `always_on_top`: bool
            When enabled, the window will be brought to the front and will keep
            the window above the rest. If disabled, it will restore the default
            behavior. Only works for the sdl2 window provider.
        `allow_screensaver`: bool
            Allow the device to show a screen saver, or to go to sleep
            on mobile devices. Defaults to True. Only works for sdl2 window
            provider.

    :Events:
        `on_motion`: etype, motionevent
            Fired when a new :class:`~kivy.input.motionevent.MotionEvent` is
            dispatched
        `on_touch_down`:
            Fired when a new touch event is initiated.
        `on_touch_move`:
            Fired when an existing touch event changes location.
        `on_touch_up`:
            Fired when an existing touch event is terminated.
        `on_draw`:
            Fired when the :class:`Window` is being drawn.
        `on_flip`:
            Fired when the :class:`Window` GL surface is being flipped.
        `on_rotate`: rotation
            Fired when the :class:`Window` is being rotated.
        `on_close`:
            Fired when the :class:`Window` is closed.
        `on_request_close`:
            Fired when the event loop wants to close the window, or if the
            escape key is pressed and `exit_on_escape` is `True`. If a function
            bound to this event returns `True`, the window will not be closed.
            If the event is triggered because of the keyboard escape key,
            the keyword argument `source` is dispatched along with a value of
            `keyboard` to the bound functions.

            .. versionadded:: 1.9.0

        `on_cursor_enter`:
            Fired when the cursor enters the window.

            .. versionadded:: 1.9.1

        `on_cursor_leave`:
            Fired when the cursor leaves the window.

            .. versionadded:: 1.9.1

        `on_minimize`:
            Fired when the window is minimized.

            .. versionadded:: 1.10.0

        `on_maximize`:
            Fired when the window is maximized.

            .. versionadded:: 1.10.0

        `on_restore`:
            Fired when the window is restored.

            .. versionadded:: 1.10.0

        `on_hide`:
            Fired when the window is hidden.

            .. versionadded:: 1.10.0

        `on_show`:
            Fired when the window is shown.

            .. versionadded:: 1.10.0

        `on_keyboard`: key, scancode, codepoint, modifier
            Fired when the keyboard is used for input.

            .. versionchanged:: 1.3.0
                The *unicode* parameter has been deprecated in favor of
                codepoint, and will be removed completely in future versions.

        `on_key_down`: key, scancode, codepoint, modifier
            Fired when a key pressed.

            .. versionchanged:: 1.3.0
                The *unicode* parameter has been deprecated in favor of
                codepoint, and will be removed completely in future versions.

        `on_key_up`: key, scancode, codepoint
            Fired when a key is released.

            .. versionchanged:: 1.3.0
                The *unicode* parameter has be deprecated in favor of
                codepoint, and will be removed completely in future versions.

        `on_drop_begin`: x, y, *args
            Fired when text(s) or file(s) drop on the application is about to
            begin.

            .. versionadded:: 2.1.0

        `on_drop_file`: filename (bytes), x, y, *args
            Fired when a file is dropped on the application.

            .. versionadded:: 1.2.0

            .. versionchanged:: 2.1.0
                Renamed from `on_dropfile` to `on_drop_file`.

        `on_drop_text`: text (bytes), x, y, *args
            Fired when a text is dropped on the application.

            .. versionadded:: 2.1.0

        `on_drop_end`: x, y, *args
            Fired when text(s) or file(s) drop on the application has ended.

            .. versionadded:: 2.1.0

        `on_memorywarning`:
            Fired when the platform have memory issue (iOS / Android mostly)
            You can listen to this one, and clean whatever you can.

            .. versionadded:: 1.9.0

        `on_textedit(self, text)`:
            Fired when inputting with IME.
            The string inputting with IME is set as the parameter of
            this event.

            .. versionadded:: 1.10.1
    '''
    __instance = ...
    __initialized = ...
    _fake_fullscreen = ...
    _density = ...
    _size = ...
    _modifiers = ...
    _rotation = ...
    _focus = ...
    gl_backends_allowed = ...
    gl_backends_ignored = ...
    managed_textinput = ...
    children = ...
    parent = ...
    icon = ...
    modifiers = ...
    minimum_width = ...
    minimum_height = ...
    always_on_top = ...
    allow_screensaver = ...
    size = ...
    clearcolor = ...
    width = ...
    height = ...
    center = ...
    rotation = ...
    softinput_mode = ...
    _keyboard_changed = ...
    _kheight = ...
    _kanimation = ...
    keyboard_height = ...
    keyboard_anim_args = ...
    keyboard_padding = ...
    system_size = ...
    borderless = ...
    custom_titlebar = ...
    fullscreen = ...
    mouse_pos = ...
    show_cursor = ...
    focus = ...
    def set_system_cursor(self, cursor_name): # -> None:
        '''Set type of a mouse cursor in the Window.

        It can be one of 'arrow', 'ibeam', 'wait', 'crosshair', 'wait_arrow',
        'size_nwse', 'size_nesw', 'size_we', 'size_ns', 'size_all', 'no', or
        'hand'.

        On some platforms there might not be a specific cursor supported and
        such an option falls back to one of the substitutable alternatives:

        +------------+-----------+------------+-----------+---------------+
        |            | Windows   | MacOS      | Linux X11 | Linux Wayland |
        +============+===========+============+===========+===============+
        | arrow      | arrow     | arrow      | arrow     | arrow         |
        +------------+-----------+------------+-----------+---------------+
        | ibeam      | ibeam     | ibeam      | ibeam     | ibeam         |
        +------------+-----------+------------+-----------+---------------+
        | wait       | wait      | arrow      | wait      | wait          |
        +------------+-----------+------------+-----------+---------------+
        | crosshair  | crosshair | crosshair  | crosshair | hand          |
        +------------+-----------+------------+-----------+---------------+
        | wait_arrow | arrow     | arrow      | wait      | wait          |
        +------------+-----------+------------+-----------+---------------+
        | size_nwse  | size_nwse | size_all   | size_all  | hand          |
        +------------+-----------+------------+-----------+---------------+
        | size_nesw  | size_nesw | size_all   | size_all  | hand          |
        +------------+-----------+------------+-----------+---------------+
        | size_we    | size_we   | size_we    | size_we   | hand          |
        +------------+-----------+------------+-----------+---------------+
        | size_ns    | size_ns   | size_ns    | size_ns   | hand          |
        +------------+-----------+------------+-----------+---------------+
        | size_all   | size_all  | size_all   | size_all  | hand          |
        +------------+-----------+------------+-----------+---------------+
        | no         | no        | no         | no        | ibeam         |
        +------------+-----------+------------+-----------+---------------+
        | hand       | hand      | hand       | hand      | hand          |
        +------------+-----------+------------+-----------+---------------+

        .. versionadded:: 1.10.1

        .. note::
            This feature requires the SDL2 window provider and is currently
            only supported on desktop platforms.
        '''
        ...
    
    top = ...
    left = ...
    opacity = ...
    @property
    def __self__(self): # -> Self:
        ...
    
    position = ...
    render_context = ...
    canvas = ...
    title = ...
    event_managers = ...
    event_managers_dict = ...
    trigger_create_window = ...
    __events__ = ...
    def __new__(cls, **kwargs):
        ...
    
    def __init__(self, **kwargs) -> None:
        ...
    
    def register(self): # -> None:
        ...
    
    def register_event_manager(self, manager): # -> None:
        '''Register and start an event manager to handle events declared in
        :attr:`~kivy.eventmanager.EventManagerBase.type_ids` attribute.

        .. versionadded:: 2.1.0

        .. warning::
            This is an experimental method and it remains so until this warning
            is present as it can be changed or removed in the next versions of
            Kivy.
        '''
        ...
    
    def unregister_event_manager(self, manager): # -> None:
        '''Unregister and stop an event manager previously registered with
        :meth:`register_event_manager`.

        .. versionadded:: 2.1.0

        .. warning::
            This is an experimental method and it remains so until this warning
            is present as it can be changed or removed in the next versions of
            Kivy.
        '''
        ...
    
    def mainloop(self): # -> None:
        '''Called by the EventLoop every frame after it idles.
        '''
        ...
    
    def maximize(self): # -> None:
        '''Maximizes the window. This method should be used on desktop
        platforms only.

        .. versionadded:: 1.9.0

        .. note::
            This feature requires the SDL2 window provider and is currently
            only supported on desktop platforms.
        '''
        ...
    
    def minimize(self): # -> None:
        '''Minimizes the window. This method should be used on desktop
        platforms only.

        .. versionadded:: 1.9.0

        .. note::
            This feature requires the SDL2 window provider and is currently
            only supported on desktop platforms.
        '''
        ...
    
    def restore(self): # -> None:
        '''Restores the size and position of a maximized or minimized window.
        This method should be used on desktop platforms only.

        .. versionadded:: 1.9.0

        .. note::
            This feature requires the SDL2 window provider and is currently
            only supported on desktop platforms.
        '''
        ...
    
    def hide(self): # -> None:
        '''Hides the window. This method should be used on desktop
        platforms only.

        .. versionadded:: 1.9.0

        .. note::
            This feature requires the SDL2 window provider and is currently
            only supported on desktop platforms.
        '''
        ...
    
    def show(self): # -> None:
        '''Shows the window. This method should be used on desktop
        platforms only.

        .. versionadded:: 1.9.0

        .. note::
            This feature requires the SDL2 window provider and is currently
            only supported on desktop platforms.
        '''
        ...
    
    def raise_window(self): # -> None:
        '''Raise the window. This method should be used on desktop
        platforms only.

        .. versionadded:: 1.9.1

        .. note::
            This feature requires the SDL2 window provider and is currently
            only supported on desktop platforms.
        '''
        ...
    
    def close(self): # -> None:
        '''Close the window'''
        ...
    
    shape_image = ...
    def set_custom_titlebar(self, widget): # -> None:
        """
        Sets a Widget as a titlebar

            :widget: The widget you want to set as the titlebar

        .. versionadded:: 2.1.0

        This function returns `True` on successfully setting the custom titlebar,
        else false

        How to use this feature

        ::

            1. first set Window.custom_titlebar to True
            2. then call Window.set_custom_titlebar with the widget/layout you want to set as titlebar as the argument # noqa: E501

        If you want a child of the widget to receive touch events, in
        that child define a property `draggable` and set it to False

        If you set the property `draggable` on a layout,
        all the child in the layout will receive touch events

        If you want to override default behavior, add function `in_drag_area(x,y)`
        to the widget

        The function is call with two args x,y which are mouse.x, and mouse.y
        the function should return

        | `True` if that point should be used to drag the window
        | `False` if you want to receive the touch event at the point

        .. note::
            If you use :meth:`in_drag_area` property `draggable`
            will not be checked

        .. note::
            This feature requires the SDL2 window provider and is currently
            only supported on desktop platforms.

        .. warning::
            :mod:`~kivy.core.window.WindowBase.custom_titlebar` must be set to True
            for the widget to be successfully set as a titlebar

        """
        ...
    
    def on_shape_image(self, instance, value): # -> None:
        ...
    
    shape_cutoff = ...
    def on_shape_cutoff(self, instance, value): # -> None:
        ...
    
    shaped = ...
    shape_mode = ...
    shape_color_key = ...
    def on_shape_color_key(self, instance, value): # -> None:
        ...
    
    def get_gl_backend_name(self):
        """
        Returns the gl backend that will or is used with this window.
        """
        ...
    
    def initialize_gl(self): # -> None:
        ...
    
    def create_window(self, *largs): # -> None:
        '''Will create the main window and configure it.

        .. warning::
            This method is called automatically at runtime. If you call it, it
            will recreate a RenderContext and Canvas. This means you'll have a
            new graphics tree, and the old one will be unusable.

            This method exist to permit the creation of a new OpenGL context
            AFTER closing the first one. (Like using runTouchApp() and
            stopTouchApp()).

            This method has only been tested in a unittest environment and
            is not suitable for Applications.

            Again, don't use this method unless you know exactly what you are
            doing!
        '''
        ...
    
    def on_flip(self): # -> None:
        '''Flip between buffers (event)'''
        ...
    
    def flip(self): # -> None:
        '''Flip between buffers'''
        ...
    
    def add_widget(self, widget, canvas=...): # -> None:
        '''Add a widget to a window'''
        ...
    
    def remove_widget(self, widget): # -> None:
        '''Remove a widget from a window
        '''
        ...
    
    def clear(self): # -> None:
        '''Clear the window with the background color'''
        ...
    
    def set_title(self, title): # -> None:
        '''Set the window title.

        .. versionadded:: 1.0.5
        '''
        ...
    
    def set_icon(self, filename): # -> None:
        '''Set the icon of the window.

        .. versionadded:: 1.0.5
        '''
        ...
    
    def to_widget(self, x, y, initial=..., relative=...): # -> tuple[Any, Any]:
        ...
    
    def to_window(self, x, y, initial=..., relative=...): # -> tuple[Any, Any]:
        ...
    
    def to_normalized_pos(self, x, y): # -> tuple[Any | float, Any | float]:
        '''Transforms absolute coordinates to normalized (0-1) coordinates
        using :attr:`system_size`.

        .. versionadded:: 2.1.0
        '''
        ...
    
    def transform_motion_event_2d(self, me, widget=...): # -> None:
        '''Transforms the motion event `me` to this window size and then if
        `widget` is passed transforms `me` to `widget`'s local coordinates.

        :raises:
            `AttributeError`: If widget's ancestor is ``None``.

        .. note::
            Unless it's a specific case, call
            :meth:`~kivy.input.motionevent.MotionEvent.push` before and
            :meth:`~kivy.input.motionevent.MotionEvent.pop` after this method's
            call to preserve previous values of `me`'s attributes.

        .. versionadded:: 2.1.0
        '''
        ...
    
    def get_window_matrix(self, x=..., y=...):
        ...
    
    def get_root_window(self): # -> Self:
        ...
    
    def get_parent_window(self): # -> Self:
        ...
    
    def get_parent_layout(self): # -> None:
        ...
    
    def on_draw(self): # -> None:
        ...
    
    def on_motion(self, etype, me): # -> None:
        '''Event called when a motion event is received.

        :Parameters:
            `etype`: str
                One of "begin", "update" or "end".
            `me`: :class:`~kivy.input.motionevent.MotionEvent`
                The motion event currently dispatched.

        .. versionchanged:: 2.1.0
            Event managers get to handle the touch event first and if none of
            them accepts the event (by returning `True`) then window will
            dispatch `me` through "on_touch_down", "on_touch_move",
            "on_touch_up" events depending on the `etype`. All non-touch events
            will go only through managers.
        '''
        ...
    
    def on_touch_down(self, touch): # -> Literal[True] | None:
        '''Event called when a touch down event is initiated.

        .. versionchanged:: 1.9.0
            The touch `pos` is now transformed to window coordinates before
            this method is called. Before, the touch `pos` coordinate would be
            `(0, 0)` when this method was called.
        '''
        ...
    
    def on_touch_move(self, touch): # -> Literal[True] | None:
        '''Event called when a touch event moves (changes location).

        .. versionchanged:: 1.9.0
            The touch `pos` is now transformed to window coordinates before
            this method is called. Before, the touch `pos` coordinate would be
            `(0, 0)` when this method was called.
        '''
        ...
    
    def on_touch_up(self, touch): # -> Literal[True] | None:
        '''Event called when a touch event is released (terminated).

        .. versionchanged:: 1.9.0
            The touch `pos` is now transformed to window coordinates before
            this method is called. Before, the touch `pos` coordinate would be
            `(0, 0)` when this method was called.
        '''
        ...
    
    def on_pre_resize(self, width, height): # -> None:
        ...
    
    def on_resize(self, width, height): # -> None:
        '''Event called when the window is resized.'''
        ...
    
    def on_move(self): # -> None:
        ...
    
    def update_viewport(self): # -> None:
        ...
    
    def update_childsize(self, childs=...):
        ...
    
    def screenshot(self, name=...): # -> str:
        '''Save the actual displayed image to a file.
        '''
        ...
    
    def on_rotate(self, rotation): # -> None:
        '''Event called when the screen has been rotated.
        '''
        ...
    
    def on_close(self, *largs): # -> None:
        '''Event called when the window is closed.'''
        ...
    
    def on_minimize(self, *largs): # -> None:
        '''Event called when the window is minimized.

        .. versionadded:: 1.10.0

        .. note::
            This feature requires the SDL2 window provider.
        '''
        ...
    
    def on_maximize(self, *largs): # -> None:
        '''Event called when the window is maximized.

        .. versionadded:: 1.10.0

        .. note::
            This feature requires the SDL2 window provider.
        '''
        ...
    
    def on_restore(self, *largs): # -> None:
        '''Event called when the window is restored.

        .. versionadded:: 1.10.0

        .. note::
            This feature requires the SDL2 window provider.
        '''
        ...
    
    def on_hide(self, *largs): # -> None:
        '''Event called when the window is hidden.

        .. versionadded:: 1.10.0

        .. note::
            This feature requires the SDL2 window provider.
        '''
        ...
    
    def on_show(self, *largs): # -> None:
        '''Event called when the window is shown.

        .. versionadded:: 1.10.0

        .. note::
            This feature requires the SDL2 window provider.
        '''
        ...
    
    def on_request_close(self, *largs, **kwargs): # -> None:
        '''Event called before we close the window. If a bound function returns
        `True`, the window will not be closed. If the event is triggered
        because of the keyboard escape key, the keyword argument `source` is
        dispatched along with a value of `keyboard` to the bound functions.

        .. warning::
            When the bound function returns True the window will not be closed,
            so use with care because the user would not be able to close the
            program, even if the red X is clicked.
        '''
        ...
    
    def on_cursor_enter(self, *largs): # -> None:
        '''Event called when the cursor enters the window.

        .. versionadded:: 1.9.1

        .. note::
            This feature requires the SDL2 window provider.
        '''
        ...
    
    def on_cursor_leave(self, *largs): # -> None:
        '''Event called when the cursor leaves the window.

        .. versionadded:: 1.9.1

        .. note::
            This feature requires the SDL2 window provider.
        '''
        ...
    
    def on_mouse_down(self, x, y, button, modifiers): # -> None:
        '''Event called when the mouse is used (pressed/released).'''
        ...
    
    def on_mouse_move(self, x, y, modifiers): # -> None:
        '''Event called when the mouse is moved with buttons pressed.'''
        ...
    
    def on_mouse_up(self, x, y, button, modifiers): # -> None:
        '''Event called when the mouse is moved with buttons pressed.'''
        ...
    
    def on_joy_axis(self, stickid, axisid, value): # -> None:
        '''Event called when a joystick has a stick or other axis moved.

        .. versionadded:: 1.9.0'''
        ...
    
    def on_joy_hat(self, stickid, hatid, value): # -> None:
        '''Event called when a joystick has a hat/dpad moved.

        .. versionadded:: 1.9.0'''
        ...
    
    def on_joy_ball(self, stickid, ballid, xvalue, yvalue): # -> None:
        '''Event called when a joystick has a ball moved.

        .. versionadded:: 1.9.0'''
        ...
    
    def on_joy_button_down(self, stickid, buttonid): # -> None:
        '''Event called when a joystick has a button pressed.

        .. versionadded:: 1.9.0'''
        ...
    
    def on_joy_button_up(self, stickid, buttonid): # -> None:
        '''Event called when a joystick has a button released.

        .. versionadded:: 1.9.0'''
        ...
    
    def on_keyboard(self, key, scancode=..., codepoint=..., modifier=..., **kwargs): # -> Literal[True] | None:
        '''Event called when keyboard is used.

        .. warning::
            Some providers may omit `scancode`, `codepoint` and/or `modifier`.
        '''
        ...
    
    if Config:
        ...
    def on_key_down(self, key, scancode=..., codepoint=..., modifier=..., **kwargs): # -> None:
        '''Event called when a key is down (same arguments as on_keyboard)'''
        ...
    
    def on_key_up(self, key, scancode=..., codepoint=..., modifier=..., **kwargs): # -> None:
        '''Event called when a key is released (same arguments as on_keyboard).
        '''
        ...
    
    def on_textinput(self, text): # -> None:
        '''Event called when text: i.e. alpha numeric non control keys or set
        of keys is entered. As it is not guaranteed whether we get one
        character or multiple ones, this event supports handling multiple
        characters.

        .. versionadded:: 1.9.0
        '''
        ...
    
    def on_drop_begin(self, x, y, *args): # -> None:
        '''Event called when a text or a file drop on the application is about
        to begin. It will be followed-up by a single or a multiple
        `on_drop_text` or `on_drop_file` events ending with an `on_drop_end`
        event.

        Arguments `x` and `y` are the mouse cursor position at the time of the
        drop and you should only rely on them if the drop originated from the
        mouse.

        :Parameters:
            `x`: `int`
                Cursor x position, relative to the window :attr:`left`, at the
                time of the drop.
            `y`: `int`
                Cursor y position, relative to the window :attr:`top`, at the
                time of the drop.
            `*args`: `tuple`
                Additional arguments.

        .. note::
            This event works with sdl2 window provider.

        .. versionadded:: 2.1.0
        '''
        ...
    
    def on_drop_file(self, filename, x, y, *args): # -> None:
        '''Event called when a file is dropped on the application.

        Arguments `x` and `y` are the mouse cursor position at the time of the
        drop and you should only rely on them if the drop originated from the
        mouse.

        :Parameters:
            `filename`: `bytes`
                Absolute path to a dropped file.
            `x`: `int`
                Cursor x position, relative to the window :attr:`left`, at the
                time of the drop.
            `y`: `int`
                Cursor y position, relative to the window :attr:`top`, at the
                time of the drop.
            `*args`: `tuple`
                Additional arguments.

        .. warning::
            This event currently works with sdl2 window provider, on pygame
            window provider and OS X with a patched version of pygame.
            This event is left in place for further evolution
            (ios, android etc.)

        .. note::
            On Windows it is possible to drop a file on the window title bar
            or on its edges and for that case :attr:`mouse_pos` won't be
            updated as the mouse cursor is not within the window.

        .. note::
            This event doesn't work for apps with elevated permissions,
            because the OS API calls are filtered. Check issue
            `#4999 <https://github.com/kivy/kivy/issues/4999>`_ for
            pointers to workarounds.

        .. versionadded:: 1.2.0

        .. versionchanged:: 2.1.0
            Renamed from `on_dropfile` to `on_drop_file`.
        '''
        ...
    
    @deprecated(msg='Deprecated in 2.1.0, use on_drop_file event instead. ' 'Event on_dropfile will be removed in the next two ' 'releases.')
    def on_dropfile(self, filename): # -> None:
        ...
    
    def on_drop_text(self, text, x, y, *args): # -> None:
        '''Event called when a text is dropped on the application.

        Arguments `x` and `y` are the mouse cursor position at the time of the
        drop and you should only rely on them if the drop originated from the
        mouse.

        :Parameters:
            `text`: `bytes`
                Text which is dropped.
            `x`: `int`
                Cursor x position, relative to the window :attr:`left`, at the
                time of the drop.
            `y`: `int`
                Cursor y position, relative to the window :attr:`top`, at the
                time of the drop.
            `*args`: `tuple`
                Additional arguments.

        .. note::
            This event works with sdl2 window provider on x11 window.

        .. note::
            On Windows it is possible to drop a text on the window title bar
            or on its edges and for that case :attr:`mouse_pos` won't be
            updated as the mouse cursor is not within the window.

        .. versionadded:: 2.1.0
        '''
        ...
    
    def on_drop_end(self, x, y, *args): # -> None:
        '''Event called when a text or a file drop on the application has
        ended.

        Arguments `x` and `y` are the mouse cursor position at the time of the
        drop and you should only rely on them if the drop originated from the
        mouse.

        :Parameters:
            `x`: `int`
                Cursor x position, relative to the window :attr:`left`, at the
                time of the drop.
            `y`: `int`
                Cursor y position, relative to the window :attr:`top`, at the
                time of the drop.
            `*args`: `tuple`
                Additional arguments.

        .. note::
            This event works with sdl2 window provider.

        .. versionadded:: 2.1.0
        '''
        ...
    
    def on_memorywarning(self): # -> None:
        '''Event called when the platform have memory issue.
        Your goal is to clear the cache in your app as much as you can,
        release unused widgets, do garbage collection etc.

        Currently, this event is fired only from the SDL2 provider, for
        iOS and Android.

        .. versionadded:: 1.9.0
        '''
        ...
    
    def on_textedit(self, text): # -> None:
        '''Event called when inputting with IME.
        The string inputting with IME is set as the parameter of
        this event.

        .. versionadded:: 1.10.1
        '''
        ...
    
    dpi = ...
    def configure_keyboards(self): # -> None:
        ...
    
    def set_vkeyboard_class(self, cls): # -> None:
        '''.. versionadded:: 1.0.8

        Set the VKeyboard class to use. If set to `None`, it will use the
        :class:`kivy.uix.vkeyboard.VKeyboard`.
        '''
        ...
    
    def release_all_keyboards(self): # -> None:
        '''.. versionadded:: 1.0.8

        This will ensure that no virtual keyboard / system keyboard is
        requested. All instances will be closed.
        '''
        ...
    
    def request_keyboard(self, callback, target, input_type=..., keyboard_suggestions=...): # -> Keyboard:
        '''.. versionadded:: 1.0.4

        Internal widget method to request the keyboard. This method is rarely
        required by the end-user as it is handled automatically by the
        :class:`~kivy.uix.textinput.TextInput`. We expose it in case you want
        to handle the keyboard manually for unique input scenarios.

        A widget can request the keyboard, indicating a callback to call
        when the keyboard is released (or taken by another widget).

        :Parameters:
            `callback`: func
                Callback that will be called when the keyboard is
                closed. This can be because somebody else requested the
                keyboard or the user closed it.
            `target`: Widget
                Attach the keyboard to the specified `target`. This should be
                the widget that requested the keyboard. Ensure you have a
                different target attached to each keyboard if you're working in
                a multi user mode.

                .. versionadded:: 1.0.8

            `input_type`: string
                Choose the type of soft keyboard to request. Can be one of
                'null', 'text', 'number', 'url', 'mail', 'datetime', 'tel',
                'address'.

                .. note::

                    `input_type` is currently only honored on Android.

                .. versionadded:: 1.8.0

                .. versionchanged:: 2.1.0
                    Added `null` to soft keyboard types.

            `keyboard_suggestions`: bool
                If True provides auto suggestions on top of keyboard.
                This will only work if input_type is set to `text`, `url`,
                `mail` or `address`.

                .. versionadded:: 2.1.0

        :Return:
            An instance of :class:`Keyboard` containing the callback, target,
            and if the configuration allows it, a
            :class:`~kivy.uix.vkeyboard.VKeyboard` instance attached as a
            *.widget* property.

        .. note::

            The behavior of this function is heavily influenced by the current
            `keyboard_mode`. Please see the Config's
            :ref:`configuration tokens <configuration-tokens>` section for
            more information.

        '''
        ...
    
    def release_keyboard(self, target=...): # -> Literal[True] | None:
        '''.. versionadded:: 1.0.4

        Internal method for the widget to release the real-keyboard. Check
        :meth:`request_keyboard` to understand how it works.
        '''
        ...
    
    def grab_mouse(self): # -> None:
        '''Grab mouse - so won't leave window

        .. versionadded:: 1.10.0

        .. note::
            This feature requires the SDL2 window provider.
        '''
        ...
    
    def ungrab_mouse(self): # -> None:
        '''Ungrab mouse

        .. versionadded:: 1.10.0

        .. note::
            This feature requires the SDL2 window provider.
        '''
        ...
    


window_impl = ...
if platform == 'linux' and (pi_version or 4) < 4:
    ...
if USE_SDL2:
    ...
else:
    ...
if platform == 'linux':
    ...
Window = ...
