"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
__all__ = ('Gesture', 'GestureDatabase', 'GesturePoint', 'GestureStroke')
class GestureDatabase:
    '''Class to handle a gesture database.'''
    def __init__(self) -> None:
        ...
    
    def add_gesture(self, gesture):
        '''Add a new gesture to the database.'''
        ...
    
    def find(self, gesture, minscore=..., rotation_invariant=...):
        '''Find a matching gesture in the database.'''
        ...
    
    def gesture_to_str(self, gesture):
        '''Convert a gesture into a unique string.'''
        ...
    
    def str_to_gesture(self, data):
        '''Convert a unique string to a gesture.'''
        ...
    


class GesturePoint:
    def __init__(self, x, y) -> None:
        '''Stores the x,y coordinates of a point in the gesture.'''
        ...
    
    def scale(self, factor):
        ''' Scales the point by the given factor.'''
        ...
    
    def __repr__(self):
        ...
    


class GestureStroke:
    ''' Gestures can be made up of multiple strokes.'''
    def __init__(self) -> None:
        ''' A stroke in the gesture.'''
        ...
    
    @property
    def max_x(self):
        ...
    
    @property
    def min_x(self):
        ...
    
    @property
    def max_y(self):
        ...
    
    @property
    def min_y(self):
        ...
    
    def add_point(self, x, y):
        '''
        add_point(x=x_pos, y=y_pos)
        Adds a point to the stroke.
        '''
        ...
    
    def scale_stroke(self, scale_factor):
        '''
        scale_stroke(scale_factor=float)
        Scales the stroke down by scale_factor.
        '''
        ...
    
    def points_distance(self, point1, point2):
        '''
        points_distance(point1=GesturePoint, point2=GesturePoint)
        Returns the distance between two GesturePoints.
        '''
        ...
    
    def stroke_length(self, point_list=...):
        '''Finds the length of the stroke. If a point list is given,
           finds the length of that list.
        '''
        ...
    
    def normalize_stroke(self, sample_points=...):
        '''Normalizes strokes so that every stroke has a standard number of
           points. Returns True if stroke is normalized, False if it can't be
           normalized. sample_points controls the resolution of the stroke.
        '''
        ...
    
    def center_stroke(self, offset_x, offset_y):
        '''Centers the stroke by offsetting the points.'''
        ...
    


class Gesture:
    '''A python implementation of a gesture recognition algorithm by
    Oleg Dopertchouk: http://www.gamedev.net/reference/articles/article2039.asp

    Implemented by Jeiel Aranal (chemikhazi@gmail.com),
    released into the public domain.
    '''
    DEFAULT_TOLERANCE = ...
    def __init__(self, tolerance=...) -> None:
        '''
        Gesture([tolerance=float])
        Creates a new gesture with an optional matching tolerance value.
        '''
        ...
    
    def add_stroke(self, point_list=...):
        '''Adds a stroke to the gesture and returns the Stroke instance.
           Optional point_list argument is a list of the mouse points for
           the stroke.
        '''
        ...
    
    def normalize(self, stroke_samples=...):
        '''Runs the gesture normalization algorithm and calculates the dot
        product with self.
        '''
        ...
    
    def get_rigid_rotation(self, dstpts):
        '''
        Extract the rotation to apply to a group of points to minimize the
        distance to a second group of points. The two groups of points are
        assumed to be centered. This is a simple version that just picks
        an angle based on the first point of the gesture.
        '''
        ...
    
    def dot_product(self, comparison_gesture):
        ''' Calculates the dot product of the gesture with another gesture.'''
        ...
    
    def rotate(self, angle):
        ...
    
    def get_score(self, comparison_gesture, rotation_invariant=...):
        ''' Returns the matching score of the gesture against another gesture.
        '''
        ...
    
    def __eq__(self, comparison_gesture) -> bool:
        ''' Allows easy comparisons between gesture instances.'''
        ...
    
    def __ne__(self, comparison_gesture) -> bool:
        ...
    
    def __lt__(self, comparison_gesture) -> bool:
        ...
    
    def __gt__(self, comparison_gesture) -> bool:
        ...
    
    def __le__(self, comparison_gesture) -> bool:
        ...
    
    def __ge__(self, comparison_gesture) -> bool:
        ...
    


