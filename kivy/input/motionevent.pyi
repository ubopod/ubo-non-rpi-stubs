"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
__all__ = ('MotionEvent', )
class EnhancedDictionary(dict):
    def __getattr__(self, attr):
        ...
    
    def __setattr__(self, attr, value):
        ...
    


class MotionEventMetaclass(type):
    def __new__(mcs, name, bases, attrs):
        ...
    


MotionEventBase = ...
class MotionEvent(MotionEventBase):
    '''Abstract class that represents an input event.

    :Parameters:
        `id`: str
            unique ID of the MotionEvent
        `args`: list
            list of parameters, passed to the depack() function
    '''
    __uniq_id = ...
    __attrs__ = ...
    def __init__(self, device, id, args, is_touch=..., type_id=...) -> None:
        ...
    
    def depack(self, args):
        '''Depack `args` into attributes of the class'''
        ...
    
    def grab(self, class_instance, exclusive=...):
        '''Grab this motion event.

        If this event is a touch you can grab it if you want to receive
        subsequent :meth:`~kivy.uix.widget.Widget.on_touch_move` and
        :meth:`~kivy.uix.widget.Widget.on_touch_up` events, even if the touch
        is not dispatched by the parent:

        .. code-block:: python

            def on_touch_down(self, touch):
                touch.grab(self)

            def on_touch_move(self, touch):
                if touch.grab_current is self:
                    # I received my grabbed touch
                else:
                    # it's a normal touch

            def on_touch_up(self, touch):
                if touch.grab_current is self:
                    # I receive my grabbed touch, I must ungrab it!
                    touch.ungrab(self)
                else:
                    # it's a normal touch
                    pass

        .. versionchanged:: 2.1.0
            Allowed grab for non-touch events.
        '''
        ...
    
    def ungrab(self, class_instance):
        '''Ungrab a previously grabbed motion event.
        '''
        ...
    
    def dispatch_done(self):
        '''Notify that dispatch to the listeners is done.

        Called by the :meth:`EventLoopBase.post_dispatch_input`.

        .. versionadded:: 2.1.0
        '''
        ...
    
    def move(self, args):
        '''Move to another position.
        '''
        ...
    
    def scale_for_screen(self, w, h, p=..., rotation=..., smode=..., kheight=...):
        '''Scale position for the screen.

        .. versionchanged:: 2.1.0
            Max value for `x`, `y` and `z` is changed respectively to `w` - 1,
            `h` - 1 and `p` - 1.
        '''
        ...
    
    def to_absolute_pos(self, nx, ny, x_max, y_max, rotation):
        '''Transforms normalized (0-1) coordinates `nx` and `ny` to absolute
        coordinates using `x_max`, `y_max` and `rotation`.

        :raises:
            `ValueError`: If `rotation` is not one of: 0, 90, 180 or 270

        .. versionadded:: 2.1.0
        '''
        ...
    
    def push(self, attrs=...):
        '''Push attribute values in `attrs` onto the stack.
        '''
        ...
    
    def pop(self):
        '''Pop attributes values from the stack.
        '''
        ...
    
    def apply_transform_2d(self, transform):
        '''Apply a transformation on x, y, z, px, py, pz,
        ox, oy, oz, dx, dy, dz.
        '''
        ...
    
    def copy_to(self, to):
        '''Copy some attribute to another motion event object.'''
        ...
    
    def distance(self, other_touch):
        '''Return the distance between the two events.
        '''
        ...
    
    def update_time_end(self):
        ...
    
    @property
    def dpos(self):
        '''Return delta between last position and current position, in the
        screen coordinate system (self.dx, self.dy).'''
        ...
    
    @property
    def opos(self):
        '''Return the initial position of the motion event in the screen
        coordinate system (self.ox, self.oy).'''
        ...
    
    @property
    def ppos(self):
        '''Return the previous position of the motion event in the screen
        coordinate system (self.px, self.py).'''
        ...
    
    @property
    def spos(self):
        '''Return the position in the 0-1 coordinate system (self.sx, self.sy).
        '''
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self):
        ...
    
    @property
    def is_mouse_scrolling(self, *args):
        '''Returns True if the touch event is a mousewheel scrolling

        .. versionadded:: 1.6.0
        '''
        ...
    


