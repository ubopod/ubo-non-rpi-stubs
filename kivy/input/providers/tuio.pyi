"""
This type stub file was generated by pyright.
"""

from kivy.input.provider import MotionEventProvider
from kivy.input.motionevent import MotionEvent

"""
This type stub file was generated by pyright.
"""
__all__ = ('TuioMotionEventProvider', 'Tuio2dCurMotionEvent', 'Tuio2dObjMotionEvent')
class TuioMotionEventProvider(MotionEventProvider):
    '''The TUIO provider listens to a socket and handles some of the incoming
    OSC messages:

        * /tuio/2Dcur
        * /tuio/2Dobj

    You can easily extend the provider to handle new TUIO paths like so::

        # Create a class to handle the new TUIO type/path
        # Replace NEWPATH with the pathname you want to handle
        class TuioNEWPATHMotionEvent(MotionEvent):

            def depack(self, args):
                # In this method, implement 'unpacking' for the received
                # arguments. you basically translate from TUIO args to Kivy
                # MotionEvent variables. If all you receive are x and y
                # values, you can do it like this:
                if len(args) == 2:
                    self.sx, self.sy = args
                    self.profile = ('pos', )
                self.sy = 1 - self.sy
                super().depack(args)

        # Register it with the TUIO MotionEvent provider.
        # You obviously need to replace the PATH placeholders appropriately.
        TuioMotionEventProvider.register('/tuio/PATH', TuioNEWPATHMotionEvent)

    .. note::

        The class name is of no technical importance. Your class will be
        associated with the path that you pass to the ``register()``
        function. To keep things simple, you should name your class after the
        path that it handles, though.
    '''
    __handlers__ = ...
    def __init__(self, device, args) -> None:
        ...
    
    @staticmethod
    def register(oscpath, classname):
        '''Register a new path to handle in TUIO provider'''
        ...
    
    @staticmethod
    def unregister(oscpath, classname):
        '''Unregister a path to stop handling it in the TUIO provider'''
        ...
    
    @staticmethod
    def create(oscpath, **kwargs):
        '''Create a touch event from a TUIO path'''
        ...
    
    def start(self):
        '''Start the TUIO provider'''
        ...
    
    def stop(self):
        '''Stop the TUIO provider'''
        ...
    
    def update(self, dispatch_fn):
        '''Update the TUIO provider (pop events from the queue)'''
        ...
    


class TuioMotionEvent(MotionEvent):
    '''Abstraction for TUIO touches/fiducials.

    Depending on the tracking software you use (e.g. Movid, CCV, etc.) and its
    TUIO implementation, the TuioMotionEvent object can support multiple
    profiles such as:

        * Fiducial ID: profile name 'markerid', attribute ``.fid``
        * Position: profile name 'pos', attributes ``.x``, ``.y``
        * Angle: profile name 'angle', attribute ``.a``
        * Velocity vector: profile name 'mov', attributes ``.X``, ``.Y``
        * Rotation velocity: profile name 'rot', attribute ``.A``
        * Motion acceleration: profile name 'motacc', attribute ``.m``
        * Rotation acceleration: profile name 'rotacc', attribute ``.r``
    '''
    __attrs__ = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    angle = ...
    mot_accel = ...
    rot_accel = ...
    xmot = ...
    ymot = ...
    zmot = ...


class Tuio2dCurMotionEvent(TuioMotionEvent):
    '''A 2dCur TUIO touch.'''
    def depack(self, args):
        ...
    


class Tuio2dObjMotionEvent(TuioMotionEvent):
    '''A 2dObj TUIO object.
    '''
    def depack(self, args):
        ...
    


class Tuio2dBlbMotionEvent(TuioMotionEvent):
    '''A 2dBlb TUIO object.
    # FIXME 3d shape are not supported
    /tuio/2Dobj set s i x y a       X Y A m r
    /tuio/2Dblb set s   x y a w h f X Y A m r
    '''
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def depack(self, args):
        ...
    


