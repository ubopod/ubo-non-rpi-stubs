"""
This type stub file was generated by pyright.
"""

from kivy.utils import deprecated

"""
This type stub file was generated by pyright.
"""
__all__ = ('SafeMembrane', 'InteractiveLauncher')
def safeWait(dt):
    ...

def unwrap(ob):
    ...

class SafeMembrane:
    '''
    This help is for a proxy object. Did you want help on the proxy's referent
    instead? Try using help(<instance>._ref)

    The SafeMembrane is a threadsafe proxy that also returns attributes as new
    thread-safe objects
    and makes thread-safe method calls, preventing thread-unsafe objects
    from leaking into the user's environment.
    '''
    __slots__ = ...
    def __init__(self, ob, *args, **kwargs) -> None:
        ...
    
    def safeIn(self):
        """Provides a thread-safe entry point for interactive launching."""
        ...
    
    def safeOut(self):
        """Provides a thread-safe exit point for interactive launching."""
        ...
    
    def isMethod(self, fn):
        ...
    
    def __repr__(self):
        ...
    
    def __call__(self, *args, **kw):
        ...
    
    def __getattribute__(self, attr, oga=...):
        ...
    
    def __getattr__(self, attr, oga=...):
        ...
    
    def __setattr__(self, attr, val, osa=...):
        ...
    
    def __delattr__(self, attr, oda=...):
        ...
    
    def __bool__(self):
        ...
    
    def __getitem__(self, arg):
        ...
    
    def __setitem__(self, arg, val):
        ...
    
    def __delitem__(self, arg):
        ...
    
    def __getslice__(self, i, j):
        ...
    
    def __setslice__(self, i, j, val):
        ...
    
    def __delslice__(self, i, j):
        ...
    
    def __enter__(self, *args, **kwargs):
        ...
    
    def __exit__(self, *args, **kwargs):
        ...
    


class InteractiveLauncher(SafeMembrane):
    '''
    Proxy to an application instance that launches it in a thread and
    then returns and acts as a proxy to the application in the thread.
    '''
    __slots__ = ...
    @deprecated
    def __init__(self, app=..., *args, **kwargs) -> None:
        ...
    
    def run(self):
        ...
    
    def stop(self):
        ...
    
    def __repr__(self):
        ...
    


