"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
__all__ = ('Parser', 'ParserException')
trace = ...
global_idmap = ...
__KV_INCLUDES__ = ...
str_re = ...
lang_str = ...
lang_fstr = ...
lang_key = ...
lang_keyvalue = ...
lang_tr = ...
lang_cls_split_pat = ...
_handlers = ...
class ProxyApp:
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __getattribute__(self, name):
        ...
    
    def __delattr__(self, name):
        ...
    
    def __setattr__(self, name, value):
        ...
    
    def __bool__(self):
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self):
        ...
    


class ParserException(Exception):
    '''Exception raised when something wrong happened in a kv file.
    '''
    def __init__(self, context, line, message, cause=...) -> None:
        ...
    


class ParserRuleProperty:
    '''Represent a property inside a rule.
    '''
    __slots__ = ...
    def __init__(self, ctx, line, name, value, ignore_prev=...) -> None:
        ...
    
    def precompile(self):
        ...
    
    @classmethod
    def get_names_from_expression(cls, node):
        """
        Look for all the symbols used in an ast node.
        """
        ...
    
    def __repr__(self):
        ...
    


class ParserRule:
    '''Represents a rule, in terms of the Kivy internal language.
    '''
    __slots__ = ...
    def __init__(self, ctx, line, name, level) -> None:
        ...
    
    def precompile(self):
        ...
    
    def create_missing(self, widget):
        ...
    
    def __repr__(self):
        ...
    


class Parser:
    '''Create a Parser object to parse a Kivy language file or Kivy content.
    '''
    PROP_ALLOWED = ...
    CLASS_RANGE = ...
    PROP_RANGE = ...
    __slots__ = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def execute_directives(self):
        ...
    
    def parse(self, content):
        '''Parse the contents of a Parser file and return a list
        of root objects.
        '''
        ...
    
    def strip_comments(self, lines):
        '''Remove all comments from all lines in-place.
           Comments need to be on a single line and not at the end of a line.
           i.e. a comment line's first non-whitespace character must be a #.
        '''
        ...
    
    def parse_level(self, level, lines, spaces=...):
        '''Parse the current level (level * spaces) indentation.
        '''
        ...
    


class ParserSelector:
    def __init__(self, key) -> None:
        ...
    
    def match(self, widget):
        ...
    
    def __repr__(self):
        ...
    


class ParserSelectorClass(ParserSelector):
    def match(self, widget):
        ...
    


class ParserSelectorName(ParserSelector):
    parents = ...
    def get_bases(self, cls):
        ...
    
    def match(self, widget):
        ...
    
    def match_rule_name(self, rule_name):
        ...
    


