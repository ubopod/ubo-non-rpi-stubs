"""
This type stub file was generated by pyright.
"""

from kivy.core.image import Image
from os import environ
from threading import Thread

"""
This type stub file was generated by pyright.
"""
__all__ = ('Loader', 'LoaderBase', 'ProxyImage')
class ProxyImage(Image):
    '''Image returned by the Loader.image() function.

    :Properties:
        `loaded`: bool, defaults to False
            This value may be True if the image is already cached.

    :Events:
        `on_load`
            Fired when the image is loaded or changed.
        `on_error`
            Fired when the image cannot be loaded.
            `error`: Exception data that occurred
    '''
    __events__ = ...
    def __init__(self, arg, **kwargs) -> None:
        ...
    
    def on_load(self):
        ...
    
    def on_error(self, error):
        ...
    


class LoaderBase:
    '''Common base for the Loader and specific implementations.
    By default, the Loader will be the best available loader implementation.

    The _update() function is called every 1 / 25.s or each frame if we have
    less than 25 FPS.
    '''
    _trigger_update = ...
    EXT_ALIAS = ...
    def __init__(self) -> None:
        ...
    
    def __del__(self):
        ...
    
    num_workers = ...
    max_upload_per_frame = ...
    loading_image = ...
    error_image = ...
    def start(self):
        '''Start the loader thread/process.'''
        ...
    
    def run(self, *largs):
        '''Main loop for the loader.'''
        ...
    
    def stop(self):
        '''Stop the loader thread/process.'''
        ...
    
    def pause(self):
        '''Pause the loader, can be useful during interactions.

        .. versionadded:: 1.6.0
        '''
        ...
    
    def resume(self):
        '''Resume the loader, after a :meth:`pause`.

        .. versionadded:: 1.6.0
        '''
        ...
    
    def image(self, filename, load_callback=..., post_callback=..., **kwargs):
        '''Load a image using the Loader. A ProxyImage is returned with a
        loading image. You can use it as follows::

            from kivy.app import App
            from kivy.uix.image import Image
            from kivy.loader import Loader

            class TestApp(App):
                def _image_loaded(self, proxyImage):
                    if proxyImage.image.texture:
                        self.image.texture = proxyImage.image.texture

                def build(self):
                    proxyImage = Loader.image("myPic.jpg")
                    proxyImage.bind(on_load=self._image_loaded)
                    self.image = Image()
                    return self.image

            TestApp().run()

        In order to cancel all background loading, call *Loader.stop()*.
        '''
        ...
    
    def remove_from_cache(self, filename):
        ...
    


if 'KIVY_DOC' in environ:
    Loader = ...
else:
    class _Worker(Thread):
        '''Thread executing tasks from a given tasks queue
        '''
        def __init__(self, pool, tasks) -> None:
            ...
        
        def run(self):
            ...
        
    
    
    class _ThreadPool:
        '''Pool of threads consuming tasks from a queue
        '''
        def __init__(self, num_threads) -> None:
            ...
        
        def add_task(self, func, *args, **kargs):
            '''Add a task to the queue
            '''
            ...
        
        def stop(self):
            ...
        
    
    
    class LoaderThreadPool(LoaderBase):
        def __init__(self) -> None:
            ...
        
        def start(self):
            ...
        
        def stop(self):
            ...
        
        def run(self, *largs):
            ...
        
    
    
    Loader = ...
