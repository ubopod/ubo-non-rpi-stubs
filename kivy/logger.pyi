"""
This type stub file was generated by pyright.
"""

import logging

"""
This type stub file was generated by pyright.
"""
__all__ = ("add_kivy_handlers", "ColonSplittingLogRecord", "ColoredLogRecord", "COLORS", "ConsoleHandler", "file_log_handler", "FileHandler", "is_color_terminal", "KivyFormatter", "LOG_LEVELS", "Logger", "LoggerHistory", "ProcessingStream", "UncoloredLogRecord")
Logger = ...
LOG_LEVELS = ...
class FileHandler(logging.Handler):
    history = ...
    filename = ...
    fd = ...
    log_dir = ...
    encoding = ...
    def purge_logs(self):
        """Purge logs which exceed the maximum amount of log files,
        starting with the oldest creation timestamp (or edit-timestamp on Linux)
        """
        ...
    
    def emit(self, message):
        ...
    


class LoggerHistory(logging.Handler):
    history = ...
    def emit(self, message):
        ...
    
    @classmethod
    def clear_history(cls):
        ...
    
    def flush(self):
        ...
    


class ConsoleHandler(logging.StreamHandler):
    """
        Emits records to a stream (by default, stderr).

        However, if the msg starts with "stderr:" it is not formatted, but
        written straight to the stream.

        .. versionadded:: 2.2.0
    """
    def filter(self, record):
        ...
    


class ProcessingStream:
    """
        Stream-like object that takes each completed line written to it,
        adds a given prefix, and applies the given function to it.

        .. versionadded:: 2.2.0
    """
    def __init__(self, channel, func) -> None:
        ...
    
    def write(self, s):
        ...
    
    def flush(self):
        ...
    
    def isatty(self):
        ...
    


def logger_config_update(section, key, value):
    ...

class ColonSplittingLogRecord(logging.LogRecord):
    """Clones an existing logRecord, but reformats the message field
    if it contains a colon.

    .. versionadded:: 2.2.0
    """
    def __init__(self, logrecord) -> None:
        ...
    


class ColoredLogRecord(logging.LogRecord):
    """Clones an existing logRecord, but reformats the levelname to add
    color, and the message to add bolding (where indicated by $BOLD
    and $RESET in the message).

    .. versionadded:: 2.2.0"""
    BLACK = ...
    RED = ...
    GREEN = ...
    YELLOW = ...
    BLUE = ...
    MAGENTA = ...
    CYAN = ...
    WHITE = ...
    RESET_SEQ = ...
    COLOR_SEQ = ...
    BOLD_SEQ = ...
    LEVEL_COLORS = ...
    def __init__(self, logrecord) -> None:
        ...
    


COLORS = ...
class UncoloredLogRecord(logging.LogRecord):
    """Clones an existing logRecord, but reformats the message
    to remove $BOLD/$RESET markup.

    .. versionadded:: 2.2.0"""
    def __init__(self, logrecord) -> None:
        ...
    


class KivyFormatter(logging.Formatter):
    """Split out first field in message marked with a colon,
    and either apply terminal color codes to the record, or strip
    out color markup if colored logging is not available.

    .. versionadded:: 2.2.0"""
    def __init__(self, *args, use_color=..., **kwargs) -> None:
        ...
    
    def format(self, record):
        ...
    


def is_color_terminal():
    """ Detect whether the environment supports color codes in output.

    .. versionadded:: 2.2.0
    """
    ...

Logger = ...
file_log_handler = ...
def add_kivy_handlers(logger):
    """ Add Kivy-specific handlers to a logger.

    .. versionadded:: 2.2.0
    """
    ...

KIVY_LOG_MODE = ...
if KIVY_LOG_MODE == "KIVY":
    ...
else:
    ...
