"""
This type stub file was generated by pyright.
"""

from kivy.tests import UnitTestTouch

"""
This type stub file was generated by pyright.
"""
__all__ = ('UnitKivyApp', )
class AsyncUnitTestTouch(UnitTestTouch):
    def __init__(self, *largs, **kwargs) -> None:
        ...
    
    def touch_down(self, *args):
        ...
    
    def touch_move(self, x, y):
        ...
    
    def touch_up(self, *args):
        ...
    


_unique_value = object
class WidgetResolver:
    """It assumes that the widget tree strictly forms a DAG.
    """
    base_widget = ...
    matched_widget = ...
    _kwargs_filter = ...
    _funcs_filter = ...
    def __init__(self, base_widget, **kwargs) -> None:
        ...
    
    def __call__(self):
        ...
    
    def match(self, **kwargs_filter):
        ...
    
    def match_funcs(self, funcs_filter=...):
        ...
    
    def check_widget(self, widget):
        ...
    
    def not_found(self, op):
        ...
    
    def down(self, **kwargs_filter):
        ...
    
    def up(self, **kwargs_filter):
        ...
    
    def family_up(self, **kwargs_filter):
        ...
    


class UnitKivyApp:
    """Base class to use with async test apps.

    .. warning::

        The classes in this file are internal and may well be removed to an
        external kivy-pytest package or similar in the future. Use at your own
        risk.
    """
    app_has_started = ...
    app_has_stopped = ...
    async_sleep = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def set_async_lib(self, async_lib):
        ...
    
    async def async_run(self, async_lib=...):
        ...
    
    def resolve_widget(self, base_widget=...):
        ...
    
    async def wait_clock_frames(self, n, sleep_time=...):
        ...
    
    def get_widget_pos_pixel(self, widget, positions):
        ...
    
    async def do_touch_down_up(self, pos=..., widget=..., duration=..., pos_jitter=..., widget_jitter=..., jitter_dt=..., end_on_pos=...):
        ...
    
    async def do_touch_drag(self, pos=..., widget=..., widget_loc=..., dx=..., dy=..., target_pos=..., target_widget=..., target_widget_offset=..., target_widget_loc=..., long_press=..., duration=..., drag_n=...):
        """Initiates a touch down, followed by some dragging to a target
        location, ending with a touch up.

        `origin`: These parameters specify where the drag starts.
        - If ``widget`` is None, it starts at ``pos`` (in window coordinates).
          If ``dx``/``dy`` is used, it is in the window coordinate system also.
        - If ``pos`` is None, it starts on the ``widget`` as specified by
          ``widget_loc``. If ``dx``/``dy`` is used, it is in the ``widget``
          coordinate system.
        - If neither is None, it starts at ``pos``, but in the ``widget``'s
          coordinate system (:meth:`~kivy.uix.widget.Widget.to_window` is used
          on it). If ``dx``/``dy`` is used, it is in the ``widget``
          coordinate system.

        `target`: These parameters specify where the drag ends.
        - If ``target_pos`` and ``target_widget`` is None, then ``dx`` and
          ``dy`` is used relative to the position where the drag started.
        - If ``target_widget`` is None, it ends at ``target_pos``
          (in window coordinates).
        - If ``target_pos`` is None, it ends on the ``target_widget`` as
          specified by ``target_widget_loc``. ``target_widget_offset``, is an
          additional ``(x, y)`` offset relative to ``target_widget_loc``.
        - If neither is None, it starts at ``target_pos``, but in the
          ``target_widget``'s coordinate system
          (:meth:`~kivy.uix.widget.Widget.to_window` is used on it).

        When ``widget`` and/or ``target_widget`` are specified, ``widget_loc``
        and ``target_widget_loc``, respectively, indicate where on the widget
        the drag starts/ends. It is a a tuple with property names of the widget
        to loop up to get the value. The default is
        ``('center_x', 'center_y')`` so the drag would start/end in the
        widget's center.
        """
        ...
    
    async def do_touch_drag_follow(self, pos=..., widget=..., widget_loc=..., target_pos=..., target_widget=..., target_widget_offset=..., target_widget_loc=..., long_press=..., duration=..., drag_n=..., max_n=...):
        """Very similar to :meth:`do_touch_drag`, except it follows the target
        widget, even if the target widget moves as a result of the drag, the
        drag will follow it until it's on the target widget.

        `origin`: These parameters specify where the drag starts.
        - If ``widget`` is None, it starts at ``pos`` (in window coordinates).
        - If ``pos`` is None, it starts on the ``widget`` as specified by
          ``widget_loc``.
        - If neither is None, it starts at ``pos``, but in the ``widget``'s
          coordinate system (:meth:`~kivy.uix.widget.Widget.to_window` is used
          on it).

        `target`: These parameters specify where the drag ends.
        - If ``target_pos`` is None, it ends on the ``target_widget`` as
          specified by ``target_widget_loc``. ``target_widget_offset``, is an
          additional ``(x, y)`` offset relative to ``target_widget_loc``.
        - If ``target_pos`` is not None, it starts at ``target_pos``, but in
          the ``target_widget``'s coordinate system
          (:meth:`~kivy.uix.widget.Widget.to_window` is used on it).

        When ``widget`` and/or ``target_widget`` are specified, ``widget_loc``
        and ``target_widget_loc``, respectively, indicate where on the widget
        the drag starts/ends. It is a a tuple with property names of the widget
        to loop up to get the value. The default is
        ``('center_x', 'center_y')`` so the drag would start/end in the
        widget's center.
        """
        ...
    
    async def do_touch_drag_path(self, path, axis_widget=..., long_press=..., duration=...):
        """Drags the touch along the specified path.

        :parameters:

            `path`: list
                A list of position tuples the touch will follow. The first
                item is used for the touch down and the rest for the move.
            `axis_widget`: a Widget
                If None, the path coordinates is in window coordinates,
                otherwise, we will first transform the path coordinates
                to window coordinates using
                :meth:`~kivy.uix.widget.Widget.to_window` of the specified
                widget.
        """
        ...
    
    async def do_keyboard_key(self, key, modifiers=..., duration=..., num_press=...):
        ...
    


