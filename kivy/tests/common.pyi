"""
This type stub file was generated by pyright.
"""

from kivy.graphics.cgl import cgl_get_backend_name
from kivy.input.motionevent import MotionEvent

"""
This type stub file was generated by pyright.
"""
__all__ = ('GraphicUnitTest', 'UnitTestTouch', 'UTMotionEvent', 'async_run', 'requires_graphics', 'ensure_web_server')
log = ...
_base = ...
if 'mock' != cgl_get_backend_name():
    _base = ...
make_screenshots = ...
http_server = ...
http_server_ready = ...
kivy_eventloop = ...
def requires_graphics(func):
    ...

def ensure_web_server(root=...):
    ...

class GraphicUnitTest(_base):
    framecount = ...
    def render(self, root, framecount=...):
        '''Call rendering process using the `root` widget.
        The screenshot will be done in `framecount` frames.
        '''
        ...
    
    def run(self, *args, **kwargs):
        '''Extend the run of unittest, to check if results directory have been
        found. If no results directory exists, the test will be ignored.
        '''
        ...
    
    def setUp(self):
        '''Prepare the graphic test, with:
            - Window size fixed to 320x240
            - Default kivy configuration
            - Without any kivy input
        '''
        ...
    
    def clear_window_and_event_loop(self):
        ...
    
    def on_window_flip(self, window):
        '''Internal method to be called when the window have just displayed an
        image.
        When an image is showed, we decrement our framecount. If framecount is
        come to 0, we are taking the screenshot.

        The screenshot is done in a temporary place, and is compared to the
        original one -> test ok/ko.
        If no screenshot is available in the results directory, a new one will
        be created.
        '''
        ...
    
    def tearDown(self, fake=...):
        '''When the test is finished, stop the application, and unbind our
        current flip callback.
        '''
        ...
    
    def interactive_ask_ref(self, code, imagefn, testid):
        ...
    
    def interactive_ask_diff(self, code, tmpfn, reffn, testid):
        ...
    
    def advance_frames(self, count):
        '''Render the new frames and:

        * tick the Clock
        * dispatch input from all registered providers
        * flush all the canvas operations
        * redraw Window canvas if necessary
        '''
        ...
    


class UnitTestTouch(MotionEvent):
    '''Custom MotionEvent representing a single touch. Similar to `on_touch_*`
    methods from the Widget class, this one introduces:

    * touch_down
    * touch_move
    * touch_up

    Create a new touch with::

        touch = UnitTestTouch(x, y)

    then you press it on the default position with::

        touch.touch_down()

    or move it or even release with these simple calls::

        touch.touch_move(new_x, new_y)
        touch.touch_up()
    '''
    def __init__(self, x, y) -> None:
        '''Create a MotionEvent instance with X and Y of the first
        position a touch is at.
        '''
        ...
    
    def touch_down(self, *args):
        ...
    
    def touch_move(self, x, y):
        ...
    
    def touch_up(self, *args):
        ...
    
    def depack(self, args):
        ...
    


class UTMotionEvent(MotionEvent):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def depack(self, args):
        ...
    


def async_run(func=..., app_cls_func=...):
    ...

