"""
This type stub file was generated by pyright.
"""

'''
Touch Ripple
============

.. versionadded:: 1.10.1

.. warning::
    This code is still experimental, and its API is subject to change in a
    future version.

This module contains `mixin <https://en.wikipedia.org/wiki/Mixin>`_ classes
to add a touch ripple visual effect known from `Google Material Design
<https://en.wikipedia.org/wiki/Material_Design>_` to widgets.

For an overview of behaviors, please refer to the :mod:`~kivy.uix.behaviors`
documentation.

The class :class:`~kivy.uix.behaviors.touchripple.TouchRippleBehavior` provides
rendering the ripple animation.

The class :class:`~kivy.uix.behaviors.touchripple.TouchRippleButtonBehavior`
basically provides the same functionality as
:class:`~kivy.uix.behaviors.button.ButtonBehavior` but rendering the ripple
animation instead of default press/release visualization.
'''
__all__ = ('TouchRippleBehavior', 'TouchRippleButtonBehavior')
class TouchRippleBehavior:
    '''Touch ripple behavior.

    Supposed to be used as mixin on widget classes.

    Ripple behavior does not trigger automatically, concrete implementation
    needs to call :func:`ripple_show` respective :func:`ripple_fade` manually.

    Example
    -------

    Here we create a Label which renders the touch ripple animation on
    interaction::

        class RippleLabel(TouchRippleBehavior, Label):

            def __init__(self, **kwargs):
                super(RippleLabel, self).__init__(**kwargs)

            def on_touch_down(self, touch):
                collide_point = self.collide_point(touch.x, touch.y)
                if collide_point:
                    touch.grab(self)
                    self.ripple_show(touch)
                    return True
                return False

            def on_touch_up(self, touch):
                if touch.grab_current is self:
                    touch.ungrab(self)
                    self.ripple_fade()
                    return True
                return False
    '''
    ripple_rad_default = ...
    ripple_duration_in = ...
    ripple_duration_out = ...
    ripple_fade_from_alpha = ...
    ripple_fade_to_alpha = ...
    ripple_scale = ...
    ripple_func_in = ...
    ripple_func_out = ...
    ripple_rad = ...
    ripple_pos = ...
    ripple_color = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def ripple_show(self, touch): # -> None:
        '''Begin ripple animation on current widget.

        Expects touch event as argument.
        '''
        ...
    
    def ripple_fade(self): # -> None:
        '''Finish ripple animation on current widget.
        '''
        ...
    


class TouchRippleButtonBehavior(TouchRippleBehavior):
    '''
    This `mixin <https://en.wikipedia.org/wiki/Mixin>`_ class provides
    a similar behavior to :class:`~kivy.uix.behaviors.button.ButtonBehavior`
    but provides touch ripple animation instead of button pressed/released as
    visual effect.

    :Events:
        `on_press`
            Fired when the button is pressed.
        `on_release`
            Fired when the button is released (i.e. the touch/click that
            pressed the button goes away).
    '''
    last_touch = ...
    always_release = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def on_touch_down(self, touch): # -> bool:
        ...
    
    def on_touch_move(self, touch): # -> bool:
        ...
    
    def on_touch_up(self, touch): # -> Literal[True] | None:
        ...
    
    def on_disabled(self, instance, value):
        ...
    
    def on_press(self): # -> None:
        ...
    
    def on_release(self): # -> None:
        ...
    


