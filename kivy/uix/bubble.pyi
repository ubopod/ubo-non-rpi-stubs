"""
This type stub file was generated by pyright.
"""

from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button

'''
Bubble
======

.. versionadded:: 1.1.0

.. image:: images/bubble.jpg
    :align: right

The :class:`Bubble` widget is a form of menu or a small popup with an arrow
arranged on one side of it's content.

The :class:`Bubble` contains an arrow attached to the content
(e.g., :class:`BubbleContent`) pointing in the direction you choose. It can
be placed either at a predefined location or flexibly by specifying a relative
position on the border of the widget.

The :class:`BubbleContent` is a styled BoxLayout and is thought to be added to
the :class:`Bubble` as a child widget. The :class:`Bubble` will then arrange
an arrow around the content as desired. Instead of the class:`BubbleContent`,
you can theoretically use any other :class:`Widget` as well as long as it
supports the 'bind' and 'unbind' function of the :class:`EventDispatcher` and
is compatible with Kivy to be placed inside a :class:`BoxLayout`.

The :class:`BubbleButton`is a styled Button. It suits to the style of
:class:`Bubble` and :class:`BubbleContent`. Feel free to place other Widgets
inside the 'content' of the :class:`Bubble`.


.. versionchanged:: 2.2.0
The properties :attr:`background_image`, :attr:`background_color`,
:attr:`border` and :attr:`border_auto_scale` were removed from :class:`Bubble`.
These properties had only been used by the content widget that now uses it's
own properties instead. The color of the arrow is now changed with
:attr:`arrow_color` instead of :attr:`background_color`.
These changes makes the :class:`Bubble` transparent to use with other layouts
as content without any side-effects due to property inheritance.

The property :attr:`flex_arrow_pos` has been added to allow further
customization of the arrow positioning.

The properties :attr:`arrow_margin`, :attr:`arrow_margin_x`,
:attr:`arrow_margin_y`, :attr:`content_size`, :attr:`content_width` and
:attr:`content_height` have been added to ease proper sizing of a
:class:`Bubble` e.g., based on it's content size.

BubbleContent
=============

The :class:`BubbleContent` is a styled BoxLayout that can be used to
add e.g., :class:`BubbleButtons` as menu items.

.. versionchanged:: 2.2.0
The properties :attr:`background_image`, :attr:`background_color`,
:attr:`border` and :attr:`border_auto_scale` were added to the
:class:`BubbleContent`. The :class:`BubbleContent` does no longer rely on these
properties being present in the parent class.

BubbleButton
============

The :class:`BubbleButton` is a styled :class:`Button` that can be used to be
added to the :class:`BubbleContent`.

Simple example
--------------

.. include:: ../../examples/widgets/bubble_test.py
    :literal:

Customize the Bubble
--------------------

You can choose the direction in which the arrow points::

    Bubble(arrow_pos='top_mid')
    or
    Bubble(size=(200, 40), flex_arrow_pos=(175, 40))

    Similarly, the corresponding properties in the '.kv' language can be used
    as well.

You can change the appearance of the bubble::

    Bubble(
        arrow_image='/path/to/arrow/image',
        arrow_color=(1, 0, 0, .5)),
    )
    BubbleContent(
        background_image='/path/to/background/image',
        background_color=(1, 0, 0, .5),  # 50% translucent red
        border=(0,0,0,0),
    )

    Similarly, the corresponding properties in the '.kv' language can be used
    as well.

-----------------------------
'''
__all__ = ('Bubble', 'BubbleButton', 'BubbleContent')
class BubbleException(Exception):
    ...


class BubbleButton(Button):
    '''A button intended for use in a BubbleContent widget.
    You can use a "normal" button class, but it will not look good unless the
    background is changed.

    Rather use this BubbleButton widget that is already defined and provides a
    suitable background for you.
    '''
    ...


class BubbleContent(BoxLayout):
    '''A styled BoxLayout that can be used as the content widget of a Bubble.

    .. versionchanged:: 2.2.0
    The graphical appearance of :class:`BubbleContent` is now based on it's
    own properties :attr:`background_image`, :attr:`background_color`,
    :attr:`border` and :attr:`border_auto_scale`. The parent widget properties
    are no longer considered. This makes the BubbleContent a standalone themed
    BoxLayout.
    '''
    background_color = ...
    background_image = ...
    border = ...
    border_auto_scale = ...


class Bubble(BoxLayout):
    '''Bubble class. See module documentation for more information.
    '''
    content = ...
    arrow_image = ...
    arrow_color = ...
    show_arrow = ...
    arrow_pos = ...
    flex_arrow_pos = ...
    limit_to = ...
    arrow_margin_x = ...
    arrow_margin_y = ...
    arrow_margin = ...
    content_width = ...
    content_height = ...
    content_size = ...
    ARROW_LAYOUTS = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def add_widget(self, widget, *args, **kwargs): # -> None:
        ...
    
    def remove_widget(self, widget, *args, **kwargs): # -> None:
        ...
    
    def on_content_size(self, instance, value): # -> None:
        ...
    
    def on_limit_to(self, instance, value): # -> None:
        ...
    
    def on_pos(self, instance, value): # -> None:
        ...
    
    def on_size(self, instance, value): # -> None:
        ...
    
    def on_arrow_image(self, instance, value): # -> None:
        ...
    
    def on_arrow_color(self, instance, value): # -> None:
        ...
    
    def on_arrow_pos(self, instance, value): # -> None:
        ...
    
    def on_flex_arrow_pos(self, instance, value): # -> None:
        ...
    
    def get_flex_arrow_layout_params(self): # -> list[Any] | None:
        ...
    
    def update_content_size(self, instance, value): # -> None:
        ...
    
    def adjust_position(self): # -> None:
        ...
    
    def reposition_inner_widgets(self): # -> None:
        ...
    


