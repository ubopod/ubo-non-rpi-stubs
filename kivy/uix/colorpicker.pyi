"""
This type stub file was generated by pyright.
"""

from kivy.graphics import InstructionGroup
from kivy.uix.relativelayout import RelativeLayout
from kivy.uix.widget import Widget
from kivy.app import App

'''
Color Picker
============

.. versionadded:: 1.7.0

.. warning::

    This widget is experimental. Its use and API can change at any time until
    this warning is removed.

.. image:: images/colorpicker.png
    :align: right

The ColorPicker widget allows a user to select a color from a chromatic
wheel where pinch and zoom can be used to change the wheel's saturation.
Sliders and TextInputs are also provided for entering the RGBA/HSV/HEX values
directly.

Usage::

    clr_picker = ColorPicker()
    parent.add_widget(clr_picker)

    # To monitor changes, we can bind to color property changes
    def on_color(instance, value):
        print("RGBA = ", str(value))  #  or instance.color
        print("HSV = ", str(instance.hsv))
        print("HEX = ", str(instance.hex_color))

    clr_picker.bind(color=on_color)


'''
__all__ = ('ColorPicker', 'ColorWheel')
def distance(pt1, pt2): # -> float:
    ...

def polar_to_rect(origin, r, theta): # -> tuple[Any, Any]:
    ...

def rect_to_polar(origin, x, y): # -> tuple[Literal[0], Literal[0]] | tuple[Any, float] | tuple[float, float]:
    ...

class ColorWheel(Widget):
    '''Chromatic wheel for the ColorPicker.

    .. versionchanged:: 1.7.1
        `font_size`, `font_name` and `foreground_color` have been removed. The
        sizing is now the same as others widget, based on 'sp'. Orientation is
        also automatically determined according to the width/height ratio.

    '''
    r = ...
    g = ...
    b = ...
    a = ...
    color = ...
    _origin = ...
    _radius = ...
    _piece_divisions = ...
    _pieces_of_pie = ...
    _inertia_slowdown = ...
    _inertia_cutoff = ...
    _num_touches = ...
    _pinch_flag = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def on__origin(self, _instance, _value): # -> None:
        ...
    
    def on__radius(self, _instance, _value): # -> None:
        ...
    
    def recolor_wheel(self): # -> None:
        ...
    
    def change_alpha(self, val): # -> None:
        ...
    
    def inertial_incr_sv_idx(self, dt): # -> Literal[False] | None:
        ...
    
    def inertial_decr_sv_idx(self, dt): # -> Literal[False] | None:
        ...
    
    def on_touch_down(self, touch): # -> Literal[False] | None:
        ...
    
    def on_touch_move(self, touch): # -> None:
        ...
    
    def on_touch_up(self, touch): # -> None:
        ...
    


class _ColorArc(InstructionGroup):
    def __init__(self, r_min, r_max, theta_min, theta_max, color=..., origin=..., **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_mesh(self):
        ...
    
    def change_color(self, color=..., color_delta=..., sv=..., a=...): # -> None:
        ...
    


class ColorPicker(RelativeLayout):
    '''
    See module documentation.
    '''
    font_name = ...
    color = ...
    hsv = ...
    hex_color = ...
    wheel = ...
    _update_hex_ev = ...
    foreground_color = ...
    def set_color(self, color): # -> None:
        ...
    
    def __init__(self, **kwargs) -> None:
        ...
    


if __name__ in ('__android__', '__main__'):
    class ColorPickerApp(App):
        def build(self): # -> ColorPicker:
            ...
        
    
    
