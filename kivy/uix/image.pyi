"""
This type stub file was generated by pyright.
"""

from kivy.uix.widget import Widget

'''
Image
=====

The :class:`Image` widget is used to display an image::

Example in python::

    wimg = Image(source='mylogo.png')

Kv Example::

    Image:
        source: 'mylogo.png'
        size: self.texture_size


Asynchronous Loading
--------------------

To load an image asynchronously (for example from an external webserver), use
the :class:`AsyncImage` subclass::

    aimg = AsyncImage(source='http://mywebsite.com/logo.png')

This can be useful as it prevents your application from waiting until the image
is loaded. If you want to display large images or retrieve them from URL's,
using :class:`AsyncImage` will allow these resources to be retrieved on a
background thread without blocking your application.

Alignment
---------

By default, the image is centered inside the widget bounding box.

Adjustment
----------

To control how the image should be adjusted to fit inside the widget box, you
should use the :attr:`~kivy.uix.image.Image.fit_mode` property. Available
options include:

- ``"scale-down"``: maintains aspect ratio without stretching.
- ``"fill"``: stretches to fill widget, may cause distortion.
- ``"contain"``: maintains aspect ratio and resizes to fit inside widget.
- ``"cover"``: maintains aspect ratio and stretches to fill widget, may clip
image.

For more details, refer to the :attr:`~kivy.uix.image.Image.fit_mode`.


You can also inherit from Image and create your own style. For example, if you
want your image to be greater than the size of your widget, you could do::

    class FullImage(Image):
        pass

And in your kivy language file::

    <-FullImage>:
        canvas:
            Color:
                rgb: (1, 1, 1)
            Rectangle:
                texture: self.texture
                size: self.width + 20, self.height + 20
                pos: self.x - 10, self.y - 10

'''
__all__ = ('Image', 'AsyncImage')
Loader = ...
class Image(Widget):
    '''Image class, see module documentation for more information.'''
    source = ...
    texture = ...
    texture_size = ...
    def get_image_ratio(self): # -> Any | float:
        ...
    
    mipmap = ...
    image_ratio = ...
    color = ...
    allow_stretch = ...
    keep_ratio = ...
    fit_mode = ...
    keep_data = ...
    anim_delay = ...
    anim_loop = ...
    nocache = ...
    def get_norm_image_size(self): # -> list[Any]:
        ...
    
    norm_image_size = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def texture_update(self, *largs): # -> None:
        ...
    
    def set_texture_from_resource(self, resource): # -> None:
        ...
    
    def on_anim_delay(self, instance, value): # -> None:
        ...
    
    def on_texture(self, instance, value): # -> None:
        ...
    
    def reload(self): # -> None:
        '''Reload image from disk. This facilitates re-loading of
        images from disk in case the image content changes.

        .. versionadded:: 1.3.0

        Usage::

            im = Image(source = '1.jpg')
            # -- do something --
            im.reload()
            # image will be re-loaded from disk

        '''
        ...
    
    def remove_from_cache(self): # -> None:
        '''Remove image from cache.

        .. versionadded:: 2.0.0
        '''
        ...
    
    def on_nocache(self, *args): # -> None:
        ...
    


class AsyncImage(Image):
    '''Asynchronous Image class. See the module documentation for more
    information.

    .. note::

        The AsyncImage is a specialized form of the Image class. You may
        want to refer to the :mod:`~kivy.loader` documentation and in
        particular, the :class:`~kivy.loader.ProxyImage` for more detail
        on how to handle events around asynchronous image loading.

    .. note::

        AsyncImage currently does not support properties
        :attr:`anim_loop` and :attr:`mipmap` and setting those properties will
        have no effect.
    '''
    __events__ = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def on_error(self, error): # -> None:
        ...
    
    def on_load(self, *args): # -> None:
        ...
    
    def is_uri(self, filename): # -> bool:
        ...
    
    def texture_update(self, *largs): # -> None:
        ...
    
    def remove_from_cache(self): # -> None:
        ...
    


