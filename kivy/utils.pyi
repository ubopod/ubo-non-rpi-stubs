"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
__all__ = ('intersection', 'difference', 'strtotuple', 'get_color_from_hex', 'get_hex_from_color', 'get_random_color', 'is_color_transparent', 'hex_colormap', 'colormap', 'boundary', 'deprecated', 'SafeList', 'interpolate', 'QueryDict', 'platform', 'escape_markup', 'reify', 'rgba', 'pi_version', 'format_bytes_to_human')
def boundary(value, minvalue, maxvalue):
    '''Limit a value between a minvalue and maxvalue.'''
    ...

def intersection(set1, set2):
    '''Return the intersection of 2 lists.'''
    ...

def difference(set1, set2):
    '''Return the difference between 2 lists.'''
    ...

def strtotuple(s):
    '''Convert a tuple string into a tuple
    with some security checks. Designed to be used
    with the eval() function::

        a = (12, 54, 68)
        b = str(a)         # return '(12, 54, 68)'
        c = strtotuple(b)  # return (12, 54, 68)

    '''
    ...

def rgba(s, *args):
    '''Return a Kivy color (4 value from 0-1 range) from either a hex string or
    a list of 0-255 values.

    .. versionadded:: 1.10.0
    '''
    ...

def get_color_from_hex(s):
    '''Transform a hex string color to a kivy
    :class:`~kivy.graphics.Color`.
    '''
    ...

def get_hex_from_color(color):
    '''Transform a kivy :class:`~kivy.graphics.Color` to a hex value::

        >>> get_hex_from_color((0, 1, 0))
        '#00ff00'
        >>> get_hex_from_color((.25, .77, .90, .5))
        '#3fc4e57f'

    .. versionadded:: 1.5.0
    '''
    ...

def get_random_color(alpha=...):
    '''Returns a random color (4 tuple).

    :Parameters:
        `alpha`: float, defaults to 1.0
            If alpha == 'random', a random alpha value is generated.
    '''
    ...

def is_color_transparent(c):
    '''Return True if the alpha channel is 0.'''
    ...

hex_colormap = ...
colormap = ...
DEPRECATED_CALLERS = ...
def deprecated(func=..., msg=...):
    '''This is a decorator which can be used to mark functions
    as deprecated. It will result in a warning being emitted the first time
    the function is used.'''
    ...

@deprecated
def interpolate(value_from, value_to, step=...):
    '''Interpolate between two values, by providing the
    reciprocal of the proportion between two points.

    .. deprecated:: 2.3.0
        For animations, consider using the
        `AnimationTransition.linear()` for a similar purpose.

    .. warning::
        These interpolations work only on lists/tuples/doubles with the same
        dimensions. No test is done to check the dimensions are the same.
    '''
    ...

class SafeList(list):
    '''List with a clear() method.

    .. warning::
        Usage of the iterate() function will decrease your performance.
    '''
    @deprecated
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def clear(self):
        ...
    
    @deprecated
    def iterate(self, reverse=...):
        ...
    


class QueryDict(dict):
    '''QueryDict is a dict() that can be queried with dot.

    ::

        d = QueryDict()
        # create a key named toto, with the value 1
        d.toto = 1
        # it's the same as
        d['toto'] = 1

    .. versionadded:: 1.0.4
    '''
    def __getattr__(self, attr):
        ...
    
    def __setattr__(self, attr, value):
        ...
    


def format_bytes_to_human(size, precision=...):
    '''Format a byte value to a human readable representation (B, KB, MB...).

    .. versionadded:: 1.0.8

    :Parameters:
        `size`: int
            Number that represents the bytes value
        `precision`: int, defaults to 2
            Precision after the comma

    Examples::

        >>> format_bytes_to_human(6463)
        '6.31 KB'
        >>> format_bytes_to_human(646368746541)
        '601.98 GB'

    '''
    ...

platform = ...
def escape_markup(text):
    '''
    Escape markup characters found in the text. Intended to be used when markup
    text is activated on the Label::

        untrusted_text = escape_markup('Look at the example [1]')
        text = '[color=ff0000]' + untrusted_text + '[/color]'
        w = Label(text=text, markup=True)

    .. versionadded:: 1.3.0
    '''
    ...

class reify:
    '''
    Put the result of a method which uses this (non-data) descriptor decorator
    in the instance dict after the first call, effectively replacing the
    decorator with an instance variable.

    It acts like @property, except that the function is only ever called once;
    after that, the value is cached as a regular attribute. This gives you lazy
    attribute creation on objects that are meant to be immutable.

    Taken from the `Pyramid project <https://pypi.python.org/pypi/pyramid/>`_.

    To use this as a decorator::

         @reify
         def lazy(self):
              ...
              return hard_to_compute_int
         first_time = self.lazy   # lazy is reify obj, reify.__get__() runs
         second_time = self.lazy  # lazy is hard_to_compute_int
    '''
    def __init__(self, func) -> None:
        ...
    
    def __get__(self, inst, cls):
        ...
    


pi_version = ...
