"""
This type stub file was generated by pyright.
"""

class Configuration:
    def __init__(self, d=...) -> None:
        """A small wrapper class that can be used to turn our configuration dicts into real objects.

        The constructor can make an empty object, or initialise from a dict. There is also the
        make_dict() method which turns the object back into a dict.

        Derived classes should define:

        _ALLOWED_FIELDS: these are the only attributes that may be set, anything else will raise
            an error. The idea is to help prevent typos.

        _FIELD_CLASS_MAP: this allows you to turn a dict that we are given as a value (for some
            field) into a Configuration object. For example if someone is setting a dict into a
            field of a CameraConfiguration, you might want it to turn into a StreamConfiguration.

            One of these fields can be set by doing (for example) camera_config.lores = {}, which
            would be turned into a StreamConfiguration.

        _FORWARD_FIELDS: allows certain attribute names to be forwarded to another contained
            object. For example, if someone wants to set CameraConfiguration.size they probably
            mean to set CameraConfiguration.main.size. So it's a kind of helpful shorthand.

        :param d: Configuration, defaults to {}
        :type d: dict, optional
        """
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __getattribute__(self, name): # -> Any:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def update(self, update_dict): # -> None:
        ...
    
    def make_dict(self): # -> dict[Any, Any]:
        ...
    
    def align(self, optimal=...): # -> None:
        ...
    


class StreamConfiguration(Configuration):
    _ALLOWED_FIELDS = ...
    _FIELD_CLASS_MAP = ...
    _FORWARD_FIELDS = ...


class SensorConfiguration(Configuration):
    _ALLOWED_FIELDS = ...
    _FIELD_CLASS_MAP = ...
    _FORWARD_FIELDS = ...


class CameraConfiguration(Configuration):
    _ALLOWED_FIELDS = ...
    _FIELD_CLASS_MAP = ...
    _FORWARD_FIELDS = ...
    def __init__(self, d=..., picam2=...) -> None:
        ...
    
    def enable_lores(self, onoff=...): # -> None:
        ...
    
    def enable_raw(self, onoff=...): # -> None:
        ...
    
    def align(self, optimal=...): # -> None:
        ...
    


