"""
This type stub file was generated by pyright.
"""

from enum import Enum

"""Encoder functionality"""
class Quality(Enum):
    """Enum type to describe the quality wanted from an encoder.

    This may be passed if a specific value (such as bitrate) has not been set.
    """
    VERY_LOW = ...
    LOW = ...
    MEDIUM = ...
    HIGH = ...
    VERY_HIGH = ...


class Encoder:
    """Base class for encoders"""
    def __init__(self) -> None:
        """Initialises encoder"""
        ...
    
    @property
    def running(self): # -> bool:
        ...
    
    @property
    def width(self): # -> int:
        """Gets width

        :return: Width of frames
        :rtype: int
        """
        ...
    
    @width.setter
    def width(self, value): # -> None:
        """Sets width

        :param value: Width
        :type value: int
        :raises RuntimeError: Failed to set width
        """
        ...
    
    @property
    def height(self): # -> int:
        """Gets height

        :return: Height of frames
        :rtype: int
        """
        ...
    
    @height.setter
    def height(self, value): # -> None:
        """Sets height

        :param value: Height
        :type value: int
        :raises RuntimeError: Failed to set height
        """
        ...
    
    @property
    def size(self): # -> tuple[int, int]:
        """Gets size

        :return: Size of frames as (width, height)
        :rtype: tuple
        """
        ...
    
    @size.setter
    def size(self, value): # -> None:
        """Sets size

        :param value: Size
        :type value: tuple
        :raises RuntimeError: Failed to set size
        """
        ...
    
    @property
    def stride(self): # -> int:
        """Gets stride

        :return: Stride
        :rtype: int
        """
        ...
    
    @stride.setter
    def stride(self, value): # -> None:
        """Sets stride

        :param value: Stride
        :type value: int
        :raises RuntimeError: Failed to set stride
        """
        ...
    
    @property
    def format(self): # -> None:
        """Get current format

        :return: Current format
        :rtype: int
        """
        ...
    
    @format.setter
    def format(self, value): # -> None:
        """Sets input format to encoder

        :param value: Format
        :type value: str
        :raises RuntimeError: Invalid format
        """
        ...
    
    @property
    def output(self): # -> Output | list[Any] | list[Output]:
        """Gets output objects

        :return: Output object list or single Output object
        :rtype: List[Output]
        """
        ...
    
    @output.setter
    def output(self, value): # -> None:
        """Sets output object, to write frames to

        :param value: Output object
        :type value: Output
        :raises RuntimeError: Invalid output passed
        """
        ...
    
    @property
    def name(self): # -> str | None:
        """Gets stream name

        :return: Name
        :rtype: str
        """
        ...
    
    @name.setter
    def name(self, value): # -> None:
        """Sets stream name

        :param value: Name
        :type value: str
        :raises RuntimeError: Failed to set name
        """
        ...
    
    def encode(self, stream, request): # -> None:
        """Encode a frame

        :param stream: Stream
        :type stream: stream
        :param request: Request
        :type request: request
        """
        ...
    
    def start(self, quality=...): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def outputframe(self, frame, keyframe=..., timestamp=...): # -> None:
        """Writes a frame

        :param frame: Frame
        :type frame: bytes
        :param keyframe: Whether frame is a keyframe or not, defaults to True
        :type keyframe: bool, optional
        """
        ...
    


