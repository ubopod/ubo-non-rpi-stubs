"""
This type stub file was generated by pyright.
"""

from .output import Output

"""Writes frames to a file"""
class FileOutput(Output):
    """File handling functionality for encoders"""
    def __init__(self, file=..., pts=..., split=...) -> None:
        """Initialise file output

        :param file: File to write frames to, defaults to None
        :type file: str or BufferedIOBase or Path, optional
        :param pts: File to write timestamps to, defaults to None
        :type pts: str or BufferedWriter, optional
        :param split: Max transmission size of data, only applies to datagrams, defaults to None
        :type split: int, optional
        """
        ...
    
    @property
    def fileoutput(self): # -> BufferedWriter | BufferedIOBase | None:
        """Return file handle"""
        ...
    
    @fileoutput.setter
    def fileoutput(self, file): # -> None:
        """Change file to output frames to"""
        ...
    
    @property
    def connectiondead(self): # -> FunctionType | None:
        """Return callback"""
        ...
    
    @connectiondead.setter
    def connectiondead(self, _callback): # -> None:
        """Callback for passing exceptions

        :param _callback: Callback that is called when exception caught
        :type _callback: function
        :raises RuntimeError: Must pass function
        """
        ...
    
    def outputframe(self, frame, keyframe=..., timestamp=...): # -> None:
        """Outputs frame from encoder

        :param frame: Frame
        :type frame: bytes
        :param keyframe: Whether frame is a keyframe, defaults to True
        :type keyframe: bool, optional
        :param timestamp: Timestamp of frame
        :type timestamp: int
        """
        ...
    
    def stop(self): # -> None:
        """Close file handle and prevent recording"""
        ...
    
    def close(self): # -> None:
        """Closes all files"""
        ...
    


