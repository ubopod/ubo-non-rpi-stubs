"""
This type stub file was generated by pyright.
"""

from OpenGL.EGL.EXT.image_dma_buf_import import *
from OpenGL.EGL.KHR.image import *
from OpenGL.EGL.VERSION.EGL_1_0 import *
from OpenGL.EGL.VERSION.EGL_1_2 import *
from OpenGL.EGL.VERSION.EGL_1_3 import *
from OpenGL.GLES2.OES.EGL_image import *
from OpenGL.GLES2.OES.EGL_image_external import *
from OpenGL.GLES2.VERSION.GLES2_2_0 import *
from OpenGL.GLES3.VERSION.GLES3_3_0 import *
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtWidgets import QWidget
from picamera2.previews.gl_helpers import *

class EglState:
    def __init__(self) -> None:
        ...
    
    def create_display(self): # -> None:
        ...
    
    def choose_config(self): # -> None:
        ...
    
    def create_context(self): # -> None:
        ...
    


class QGlPicamera2(QWidget):
    done_signal = ...
    def __init__(self, picam2, parent=..., width=..., height=..., bg_colour=..., keep_ar=..., transform=..., preview_window=...) -> None:
        ...
    
    def cleanup(self): # -> None:
        ...
    
    def closeEvent(self, event): # -> None:
        ...
    
    def signal_done(self, job): # -> None:
        ...
    
    def paintEngine(self): # -> None:
        ...
    
    def create_surface(self): # -> None:
        ...
    
    def init_gl(self): # -> None:
        ...
    
    class Buffer:
        FMT_MAP = ...
        def __init__(self, display, completed_request, max_texture_size) -> None:
            ...
        
    
    
    def set_overlay(self, overlay): # -> None:
        ...
    
    def repaint(self, completed_request, update_viewport=...): # -> None:
        ...
    
    def render_request(self, completed_request): # -> None:
        """Draw the camera image using Qt and OpenGL/GLES."""
        ...
    
    @pyqtSlot()
    def handle_requests(self): # -> None:
        ...
    
    def recalculate_viewport(self): # -> tuple[Literal[0], Literal[0], Any, Any] | tuple[Any, Any, Any, Any]:
        ...
    
    def resizeEvent(self, event): # -> None:
        ...
    
    def show(self): # -> None:
        ...
    


