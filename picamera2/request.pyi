"""
This type stub file was generated by pyright.
"""

_log = ...
class _MappedBuffer:
    def __init__(self, request, stream, write=...) -> None:
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, exc_type, exc_value, exc_traceback): # -> None:
        ...
    


class MappedArray:
    def __init__(self, request, stream, reshape=..., write=...) -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, exc_type, exc_value, exc_traceback): # -> None:
        ...
    
    @property
    def array(self): # -> ndarray[Any, dtype[unsignedinteger[_8Bit]]] | None:
        ...
    


class CompletedRequest:
    def __init__(self, request, picam2) -> None:
        ...
    
    def acquire(self): # -> None:
        """Acquire a reference to this completed request, which stops it being recycled back to the camera system."""
        ...
    
    def release(self): # -> None:
        """Release this completed frame back to the camera system (once its reference count reaches zero)."""
        ...
    
    def make_buffer(self, name): # -> NDArray[unsignedinteger[_8Bit]]:
        """Make a 1d numpy array from the named stream's buffer."""
        ...
    
    def get_metadata(self): # -> dict[Any, Any]:
        """Fetch the metadata corresponding to this completed request."""
        ...
    
    def make_array(self, name):
        """Make a 2d numpy array from the named stream's buffer."""
        ...
    
    def make_image(self, name, width=..., height=...):
        """Make a PIL image from the named stream's buffer."""
        ...
    
    def save(self, name, file_output, format=..., exif_data=...):
        """Save a JPEG or PNG image of the named stream's buffer.

        exif_data - dictionary containing user defined exif data (based on `piexif`). This will
            overwrite existing exif information generated by picamera2.
        """
        ...
    
    def save_dng(self, file_output, name=...):
        """Save a DNG RAW image of the raw stream's buffer."""
        ...
    


class Helpers:
    """This class implements functionality required by the CompletedRequest methods.

    In such a way that it can be usefully accessed even without a CompletedRequest object.
    """
    def __init__(self, picam2) -> None:
        ...
    
    def make_array(self, buffer, config): # -> ndarray[Any, dtype[Any]] | ndarray[Any, dtype[unsignedinteger[_16Bit]]] | NDArray[Any]:
        """Make a 2d numpy array from the named stream's buffer."""
        ...
    
    def make_image(self, buffer, config, width=..., height=...): # -> Image:
        """Make a PIL image from the named stream's buffer."""
        ...
    
    def save(self, img, metadata, file_output, format=..., exif_data=...): # -> None:
        """Save a JPEG or PNG image of the named stream's buffer.

        exif_data - dictionary containing user defined exif data (based on `piexif`). This will
            overwrite existing exif information generated by picamera2.
        """
        ...
    
    def save_dng(self, buffer, metadata, config, file_output): # -> None:
        """Save a DNG RAW image of the raw stream's buffer."""
        ...
    
    def decompress(self, array): # -> NDArray[unsignedinteger[_8Bit]]:
        """Decompress an image buffer that has been compressed with a PiSP compression format."""
        ...
    


