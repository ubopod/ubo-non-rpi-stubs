"""
This type stub file was generated by pyright.
"""

import wave
import onnxruntime
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable, List, Optional, Union
from .config import PiperConfig

_LOGGER = ...
@dataclass
class PiperVoice:
    session: onnxruntime.InferenceSession
    config: PiperConfig
    @staticmethod
    def load(model_path: Union[str, Path], config_path: Optional[Union[str, Path]] = ..., use_cuda: bool = ...) -> PiperVoice:
        """Load an ONNX model and config."""
        ...
    
    def phonemize(self, text: str) -> List[List[str]]:
        """Text to phonemes grouped by sentence."""
        ...
    
    def phonemes_to_ids(self, phonemes: List[str]) -> List[int]:
        """Phonemes to ids."""
        ...
    
    def synthesize(self, text: str, wav_file: wave.Wave_write, speaker_id: Optional[int] = ..., length_scale: Optional[float] = ..., noise_scale: Optional[float] = ..., noise_w: Optional[float] = ..., sentence_silence: float = ...): # -> None:
        """Synthesize WAV audio from text."""
        ...
    
    def synthesize_stream_raw(self, text: str, speaker_id: Optional[int] = ..., length_scale: Optional[float] = ..., noise_scale: Optional[float] = ..., noise_w: Optional[float] = ..., sentence_silence: float = ...) -> Iterable[bytes]:
        """Synthesize raw audio per sentence from text."""
        ...
    
    def synthesize_ids_to_raw(self, phoneme_ids: List[int], speaker_id: Optional[int] = ..., length_scale: Optional[float] = ..., noise_scale: Optional[float] = ..., noise_w: Optional[float] = ...) -> bytes:
        """Synthesize raw audio from phoneme ids."""
        ...
    


