"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, Optional, Sequence, TYPE_CHECKING, Tuple, Type, TypeVar
from .sd_bus_internals import SdBus
from types import FunctionType

if TYPE_CHECKING:
    T = TypeVar('T')
    SelfMeta = TypeVar('SelfMeta', bound="DbusInterfaceMetaCommon")
class DbusSomethingCommon:
    interface_name: str
    serving_enabled: bool
    ...


class DbusSomethingAsync(DbusSomethingCommon):
    ...


class DbusSomethingSync(DbusSomethingCommon):
    ...


class DbusInterfaceMetaCommon(type):
    def __new__(cls: Type[SelfMeta], name: str, bases: Tuple[type, ...], namespace: Dict[str, Any], interface_name: Optional[str] = ..., serving_enabled: bool = ...) -> SelfMeta:
        ...
    


MEMBER_NAME_REQUIREMENTS = ...
class DbusMethodCommon(DbusSomethingCommon):
    def __init__(self, original_method: FunctionType, method_name: Optional[str], input_signature: str, input_args_names: Optional[Sequence[str]], result_signature: str, result_args_names: Optional[Sequence[str]], flags: int) -> None:
        ...
    


class DbusPropertyCommon(DbusSomethingCommon):
    def __init__(self, property_name: Optional[str], property_signature: str, flags: int, original_method: FunctionType) -> None:
        ...
    


class DbusSignalCommon(DbusSomethingCommon):
    def __init__(self, signal_name: Optional[str], signal_signature: str, args_names: Sequence[str], flags: int, original_method: FunctionType) -> None:
        ...
    


class DbusBindedAsync:
    ...


class DbusBindedSync:
    ...


class DbusMethodOverride:
    def __init__(self, override_method: T) -> None:
        ...
    


class DbusPropertyOverride:
    def __init__(self, getter_override: T) -> None:
        ...
    
    def setter(self, new_setter: Optional[Callable[[Any, T], None]]) -> None:
        ...
    
    def setter_private(self, new_setter: Optional[Callable[[Any, T], None]]) -> None:
        ...
    


class DbusRemoteObjectMeta:
    def __init__(self, service_name: str, object_path: str, bus: Optional[SdBus] = ...) -> None:
        ...
    


class DbusLocalObjectMeta:
    def __init__(self) -> None:
        ...
    


class DbusClassMeta:
    def __init__(self, interface_name: str, serving_enabled: bool) -> None:
        ...
    


