"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Optional, TYPE_CHECKING, Tuple, Type, TypeVar, Union
from weakref import WeakKeyDictionary, WeakValueDictionary
from .dbus_common_elements import DbusClassMeta, DbusInterfaceMetaCommon, DbusLocalObjectMeta, DbusMethodOverride, DbusPropertyOverride
from .sd_bus_internals import SdBus

if TYPE_CHECKING:
    Self = TypeVar('Self', bound="DbusInterfaceBaseAsync")
    DbusOverride = Union[DbusMethodOverride, DbusPropertyOverride]
DBUS_CLASS_TO_META: WeakKeyDictionary[type, DbusClassMeta] = ...
DBUS_INTERFACE_NAME_TO_CLASS: WeakValueDictionary[str, DbusInterfaceMetaAsync] = ...
class DbusInterfaceMetaAsync(DbusInterfaceMetaCommon):
    def __new__(cls, name: str, bases: Tuple[type, ...], namespace: Dict[str, Any], interface_name: Optional[str] = ..., serving_enabled: bool = ...) -> DbusInterfaceMetaAsync:
        ...
    


class DbusInterfaceBaseAsync(metaclass=DbusInterfaceMetaAsync):
    def __init__(self) -> None:
        ...
    
    async def start_serving(self, object_path: str, bus: Optional[SdBus] = ...) -> None:
        ...
    
    def export_to_dbus(self, object_path: str, bus: Optional[SdBus] = ...) -> DbusExportHandle:
        ...
    
    @classmethod
    def new_connect(cls: Type[Self], service_name: str, object_path: str, bus: Optional[SdBus] = ...) -> Self:
        ...
    
    @classmethod
    def new_proxy(cls: Type[Self], service_name: str, object_path: str, bus: Optional[SdBus] = ...) -> Self:
        ...
    


class DbusExportHandle:
    def __init__(self, local_meta: DbusLocalObjectMeta) -> None:
        ...
    
    async def __aenter__(self) -> DbusExportHandle:
        ...
    
    def __enter__(self) -> DbusExportHandle:
        ...
    
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None:
        ...
    
    async def __aexit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None:
        ...
    
    def stop(self) -> None:
        ...
    


