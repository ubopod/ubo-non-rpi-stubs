"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Literal, TYPE_CHECKING, Tuple
from .dbus_proxy_async_interface_base import DbusInterfaceBaseAsync
from .dbus_proxy_async_method import dbus_method_async
from .dbus_proxy_async_signal import dbus_signal_async

if TYPE_CHECKING:
    DBUS_PROPERTIES_CHANGED_TYPING = Tuple[str, Dict[str, Tuple[str, Any]], List[str],]
class DbusPeerInterfaceAsync(DbusInterfaceBaseAsync, interface_name='org.freedesktop.DBus.Peer', serving_enabled=False):
    @dbus_method_async(method_name='Ping')
    async def dbus_ping(self) -> None:
        ...
    
    @dbus_method_async(method_name='GetMachineId')
    async def dbus_machine_id(self) -> str:
        ...
    


class DbusIntrospectableAsync(DbusInterfaceBaseAsync, interface_name='org.freedesktop.DBus.Introspectable', serving_enabled=False):
    @dbus_method_async(method_name='Introspect')
    async def dbus_introspect(self) -> str:
        ...
    


class DbusPropertiesInterfaceAsync(DbusInterfaceBaseAsync, interface_name='org.freedesktop.DBus.Properties', serving_enabled=False):
    @dbus_signal_async('sa{sv}as')
    def properties_changed(self) -> DBUS_PROPERTIES_CHANGED_TYPING:
        ...
    
    async def properties_get_all_dict(self, on_unknown_member: Literal['error', 'ignore', 'reuse'] = ...) -> Dict[str, Any]:
        ...
    


class DbusInterfaceCommonAsync(DbusPeerInterfaceAsync, DbusPropertiesInterfaceAsync, DbusIntrospectableAsync):
    ...


