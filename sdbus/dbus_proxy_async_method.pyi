"""
This type stub file was generated by pyright.
"""

from contextvars import ContextVar
from typing import Any, Callable, Optional, Sequence, TYPE_CHECKING, Type, TypeVar, Union, overload
from .dbus_common_elements import DbusBindedAsync, DbusMethodCommon, DbusRemoteObjectMeta, DbusSomethingAsync
from .sd_bus_internals import SdBusMessage
from .dbus_proxy_async_interface_base import DbusInterfaceBaseAsync

if TYPE_CHECKING:
    T = TypeVar('T')
else:
    ...
CURRENT_MESSAGE: ContextVar[SdBusMessage] = ...
def get_current_message() -> SdBusMessage:
    ...

class DbusMethodAsync(DbusMethodCommon, DbusSomethingAsync):
    @overload
    def __get__(self, obj: None, obj_class: Type[DbusInterfaceBaseAsync]) -> DbusMethodAsync:
        ...
    
    @overload
    def __get__(self, obj: DbusInterfaceBaseAsync, obj_class: Type[DbusInterfaceBaseAsync]) -> Callable[..., Any]:
        ...
    
    def __get__(self, obj: Optional[DbusInterfaceBaseAsync], obj_class: Optional[Type[DbusInterfaceBaseAsync]] = ...) -> Union[Callable[..., Any], DbusMethodAsync]:
        ...
    


class DbusMethodAsyncBaseBind(DbusBindedAsync):
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        ...
    


class DbusMethodAsyncProxyBind(DbusMethodAsyncBaseBind):
    def __init__(self, dbus_method: DbusMethodAsync, proxy_meta: DbusRemoteObjectMeta) -> None:
        ...
    
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        ...
    


class DbusMethodAsyncLocalBind(DbusMethodAsyncBaseBind):
    def __init__(self, dbus_method: DbusMethodAsync, local_object: DbusInterfaceBaseAsync) -> None:
        ...
    
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        ...
    


def dbus_method_async(input_signature: str = ..., result_signature: str = ..., flags: int = ..., result_args_names: Optional[Sequence[str]] = ..., input_args_names: Optional[Sequence[str]] = ..., method_name: Optional[str] = ...) -> Callable[[T], T]:
    ...

def dbus_method_async_override() -> Callable[[T], T]:
    ...

