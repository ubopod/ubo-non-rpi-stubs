"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Dict, List, Optional, TYPE_CHECKING, Tuple
from .dbus_common_elements import DbusLocalObjectMeta
from .dbus_proxy_async_interface_base import DbusExportHandle, DbusInterfaceBaseAsync
from .dbus_proxy_async_interfaces import DbusInterfaceCommonAsync
from .dbus_proxy_async_method import dbus_method_async
from .dbus_proxy_async_signal import dbus_signal_async
from .sd_bus_internals import SdBus

if TYPE_CHECKING:
    ...
class DbusObjectManagerExportHandle(DbusExportHandle):
    def __init__(self, local_meta: DbusLocalObjectMeta, remove_object_call: Callable[[], None]) -> None:
        ...
    
    def stop(self) -> None:
        ...
    


class DbusObjectManagerInterfaceAsync(DbusInterfaceCommonAsync, interface_name='org.freedesktop.DBus.ObjectManager', serving_enabled=False):
    def __init__(self) -> None:
        ...
    
    @dbus_method_async(result_signature='a{oa{sa{sv}}}')
    async def get_managed_objects(self) -> Dict[str, Dict[str, Dict[str, Any]]]:
        ...
    
    @dbus_signal_async('oa{sa{sv}}')
    def interfaces_added(self) -> Tuple[str, Dict[str, Dict[str, Any]]]:
        ...
    
    @dbus_signal_async('oao')
    def interfaces_removed(self) -> Tuple[str, List[str]]:
        ...
    
    def export_to_dbus(self, object_path: str, bus: Optional[SdBus] = ...) -> DbusExportHandle:
        ...
    
    def export_with_manager(self, object_path: str, object_to_export: DbusInterfaceBaseAsync, bus: Optional[SdBus] = ...) -> DbusObjectManagerExportHandle:
        ...
    
    def remove_managed_object(self, managed_object: DbusInterfaceBaseAsync) -> None:
        ...
    


