"""
This type stub file was generated by pyright.
"""

from types import FunctionType
from typing import Any, AsyncIterable, AsyncIterator, Callable, Generic, Optional, Sequence, TYPE_CHECKING, Tuple, Type, TypeVar, Union, overload
from .dbus_common_elements import DbusBindedAsync, DbusLocalObjectMeta, DbusRemoteObjectMeta, DbusSignalCommon, DbusSomethingAsync
from .dbus_proxy_async_interface_base import DbusInterfaceBaseAsync
from .sd_bus_internals import SdBus

if TYPE_CHECKING:
    ...
T = TypeVar('T')
class DbusSignalAsync(DbusSomethingAsync, DbusSignalCommon, Generic[T]):
    def __init__(self, signal_name: Optional[str], signal_signature: str, args_names: Sequence[str], flags: int, original_method: FunctionType) -> None:
        ...
    
    @overload
    def __get__(self, obj: None, obj_class: Type[DbusInterfaceBaseAsync]) -> DbusSignalAsync[T]:
        ...
    
    @overload
    def __get__(self, obj: DbusInterfaceBaseAsync, obj_class: Type[DbusInterfaceBaseAsync]) -> DbusSignalAsyncBaseBind[T]:
        ...
    
    def __get__(self, obj: Optional[DbusInterfaceBaseAsync], obj_class: Optional[Type[DbusInterfaceBaseAsync]] = ...) -> Union[DbusSignalAsyncBaseBind[T], DbusSignalAsync[T]]:
        ...
    
    async def catch_anywhere(self, service_name: str, bus: Optional[SdBus] = ...) -> AsyncIterable[Tuple[str, T]]:
        ...
    


class DbusSignalAsyncBaseBind(DbusBindedAsync, AsyncIterable[T], Generic[T]):
    async def catch(self) -> AsyncIterator[T]:
        ...
    
    __aiter__ = ...
    async def catch_anywhere(self, service_name: Optional[str] = ..., bus: Optional[SdBus] = ...) -> AsyncIterable[Tuple[str, T]]:
        ...
    
    def emit(self, args: T) -> None:
        ...
    


class DbusSignalAsyncProxyBind(DbusSignalAsyncBaseBind[T]):
    def __init__(self, dbus_signal: DbusSignalAsync[T], proxy_meta: DbusRemoteObjectMeta) -> None:
        ...
    
    async def catch(self) -> AsyncIterator[T]:
        ...
    
    __aiter__ = ...
    async def catch_anywhere(self, service_name: Optional[str] = ..., bus: Optional[SdBus] = ...) -> AsyncIterable[Tuple[str, T]]:
        ...
    
    def emit(self, args: T) -> None:
        ...
    


class DbusSignalAsyncLocalBind(DbusSignalAsyncBaseBind[T]):
    def __init__(self, dbus_signal: DbusSignalAsync[T], local_meta: DbusLocalObjectMeta) -> None:
        ...
    
    async def catch(self) -> AsyncIterator[T]:
        ...
    
    __aiter__ = ...
    async def catch_anywhere(self, service_name: Optional[str] = ..., bus: Optional[SdBus] = ...) -> AsyncIterable[Tuple[str, T]]:
        ...
    
    def emit(self, args: T) -> None:
        ...
    


def dbus_signal_async(signal_signature: str = ..., signal_args_names: Sequence[str] = ..., flags: int = ..., signal_name: Optional[str] = ...) -> Callable[[Callable[[Any], T]], DbusSignalAsync[T]]:
    ...

