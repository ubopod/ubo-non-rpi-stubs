"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Literal, TYPE_CHECKING
from .dbus_proxy_sync_interface_base import DbusInterfaceBase
from .dbus_proxy_sync_method import dbus_method

if TYPE_CHECKING:
    ...
class DbusPeerInterface(DbusInterfaceBase, interface_name='org.freedesktop.DBus.Peer', serving_enabled=False):
    @dbus_method(method_name='Ping')
    def dbus_ping(self) -> None:
        ...
    
    @dbus_method(method_name='GetMachineId')
    def dbus_machine_id(self) -> str:
        ...
    


class DbusIntrospectable(DbusInterfaceBase, interface_name='org.freedesktop.DBus.Introspectable', serving_enabled=False):
    @dbus_method(method_name='Introspect')
    def dbus_introspect(self) -> str:
        ...
    


class DbusPropertiesInterface(DbusInterfaceBase, interface_name='org.freedesktop.DBus.Properties', serving_enabled=False):
    def properties_get_all_dict(self, on_unknown_member: Literal['error', 'ignore', 'reuse'] = ...) -> Dict[str, Any]:
        ...
    


class DbusInterfaceCommon(DbusPeerInterface, DbusIntrospectable, DbusPropertiesInterface):
    ...


class DbusObjectManagerInterface(DbusInterfaceCommon, interface_name='org.freedesktop.DBus.ObjectManager', serving_enabled=False):
    @dbus_method(result_signature='a{oa{sa{sv}}}')
    def get_managed_objects(self) -> Dict[str, Dict[str, Dict[str, Any]]]:
        ...
    


