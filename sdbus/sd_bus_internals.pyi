"""
This type stub file was generated by pyright.
"""

from asyncio import Future
from typing import Any, Callable, Coroutine, Dict, List, Optional, Sequence, TYPE_CHECKING, Tuple, Type, Union

if TYPE_CHECKING:
    DbusBasicTypes = Union[str, int, bytes, float, Any]
    DbusStructType = Tuple[DbusBasicTypes, ...]
    DbusDictType = Dict[DbusBasicTypes, DbusBasicTypes]
    DbusVariantType = Tuple[str, DbusStructType]
    DbusListType = List[DbusBasicTypes]
    DbusCompleteTypes = Union[DbusBasicTypes, DbusStructType, DbusDictType, DbusVariantType, DbusListType]
__STUB_ERROR = ...
class SdBusSlot:
    """Holds reference to SdBus slot"""
    def close(self) -> None:
        ...
    


class SdBusInterface:
    slot: Optional[SdBusSlot]
    method_list: List[object]
    method_dict: Dict[bytes, object]
    property_list: List[object]
    property_get_dict: Dict[bytes, object]
    property_set_dict: Dict[bytes, object]
    signal_list: List[object]
    def add_method(self, member_name: str, signature: str, input_args_names: Sequence[str], result_signature: str, result_args_names: Sequence[str], flags: int, callback: Callable[[SdBusMessage], Coroutine[Any, Any, None]], /) -> None:
        ...
    
    def add_property(self, property_name: str, property_signature: str, get_function: Callable[[SdBusMessage], Any], set_function: Optional[Callable[[SdBusMessage], None]], flags: int, /) -> None:
        ...
    
    def add_signal(self, signal_name: str, signal_signature: str, signal_args_names: Sequence[str], flags: int, /) -> None:
        ...
    


class SdBusMessage:
    def append_data(self, signature: str, *args: DbusCompleteTypes) -> None:
        ...
    
    def open_container(self, container_type: str, container_signature: str, /) -> None:
        ...
    
    def close_container(self) -> None:
        ...
    
    def enter_container(self, container_type: str, container_signature: str, /) -> None:
        ...
    
    def exit_container(self) -> None:
        ...
    
    def dump(self) -> None:
        ...
    
    def seal(self) -> None:
        ...
    
    def get_contents(self) -> Tuple[DbusCompleteTypes, ...]:
        ...
    
    def create_reply(self) -> SdBusMessage:
        ...
    
    def create_error_reply(self, error_name: str, error_message: str, /) -> SdBusMessage:
        ...
    
    def send(self) -> None:
        ...
    
    def parse_to_tuple(self) -> Tuple[Any, ...]:
        ...
    
    expect_reply: bool = ...
    destination: Optional[str] = ...
    path: Optional[str] = ...
    interface: Optional[str] = ...
    member: Optional[str] = ...
    sender: Optional[str] = ...


class SdBus:
    def call(self, message: SdBusMessage, /) -> SdBusMessage:
        ...
    
    def call_async(self, message: SdBusMessage, /) -> Future[SdBusMessage]:
        ...
    
    def process(self) -> None:
        ...
    
    def get_fd(self) -> int:
        ...
    
    def new_method_call_message(self, destination_name: str, object_path: str, interface_name: str, member_name: str, /) -> SdBusMessage:
        ...
    
    def new_property_get_message(self, destination_service_name: str, object_path: str, interface_name: str, member_name: str, /) -> SdBusMessage:
        ...
    
    def new_property_set_message(self, destination_service_name: str, object_path: str, interface_name: str, member_name: str, /) -> SdBusMessage:
        ...
    
    def new_signal_message(self, object_path: str, interface_name: str, member_name: str, /) -> SdBusMessage:
        ...
    
    def add_interface(self, new_interface: SdBusInterface, object_path: str, interface_name: str, /) -> None:
        ...
    
    def match_signal_async(self, senders_name: Optional[str], object_path: Optional[str], interface_name: Optional[str], member_name: Optional[str], callback: Callable[[SdBusMessage], None], /) -> Future[SdBusSlot]:
        ...
    
    def request_name_async(self, name: str, flags: int, /) -> Future[None]:
        ...
    
    def request_name(self, name: str, flags: int, /) -> None:
        ...
    
    def add_object_manager(self, path: str, /) -> SdBusSlot:
        ...
    
    def emit_object_added(self, path: str, /) -> None:
        ...
    
    def emit_object_removed(self, path: str, /) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    def start(self) -> None:
        ...
    
    address: Optional[str] = ...
    method_call_timeout_usec: int = ...


def sd_bus_open() -> SdBus:
    ...

def sd_bus_open_user() -> SdBus:
    ...

def sd_bus_open_system() -> SdBus:
    ...

def sd_bus_open_system_remote(host: str, /) -> SdBus:
    ...

def sd_bus_open_user_machine(machine: str, /) -> SdBus:
    ...

def sd_bus_open_system_machine(machine: str, /) -> SdBus:
    ...

def encode_object_path(prefix: str, external: str) -> str:
    ...

def decode_object_path(prefix: str, full_path: str) -> str:
    ...

def map_exception_to_dbus_error(exc: Type[Exception], dbus_error_name: str, /) -> None:
    ...

def add_exception_mapping(exc: Exception, /) -> None:
    ...

def is_interface_name_valid(string_to_check: str, /) -> bool:
    ...

def is_service_name_valid(string_to_check: str, /) -> bool:
    ...

def is_member_name_valid(string_to_check: str, /) -> bool:
    ...

def is_object_path_valid(string_to_check: str, /) -> bool:
    ...

class SdBusBaseError(Exception):
    ...


class SdBusUnmappedMessageError(SdBusBaseError):
    ...


class SdBusLibraryError(SdBusBaseError):
    ...


class SdBusRequestNameError(SdBusBaseError):
    ...


class SdBusRequestNameInQueueError(SdBusRequestNameError):
    ...


class SdBusRequestNameExistsError(SdBusRequestNameError):
    ...


class SdBusRequestNameAlreadyOwnerError(SdBusRequestNameError):
    ...


DBUS_ERROR_TO_EXCEPTION: Dict[str, Exception] = ...
EXCEPTION_TO_DBUS_ERROR: Dict[Exception, str] = ...
DbusDeprecatedFlag: int = ...
DbusHiddenFlag: int = ...
DbusUnprivilegedFlag: int = ...
DbusNoReplyFlag: int = ...
DbusPropertyConstFlag: int = ...
DbusPropertyEmitsChangeFlag: int = ...
DbusPropertyEmitsInvalidationFlag: int = ...
DbusPropertyExplicitFlag: int = ...
DbusSensitiveFlag: int = ...
NameAllowReplacementFlag: int = ...
NameReplaceExistingFlag: int = ...
NameQueueFlag: int = ...
