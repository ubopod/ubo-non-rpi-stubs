"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from sdbus.sd_bus_internals import SdBus
from .interfaces_devices import NetworkManagerDeviceBluetoothInterfaceAsync, NetworkManagerDeviceBondInterfaceAsync, NetworkManagerDeviceBridgeInterfaceAsync, NetworkManagerDeviceGenericInterfaceAsync, NetworkManagerDeviceIPTunnelInterfaceAsync, NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceMacsecInterfaceAsync, NetworkManagerDeviceMacvlanInterfaceAsync, NetworkManagerDeviceModemInterfaceAsync, NetworkManagerDeviceOlpcMeshInterfaceAsync, NetworkManagerDeviceOvsBridgeInterfaceAsync, NetworkManagerDeviceOvsPortInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceTeamInterfaceAsync, NetworkManagerDeviceTunInterfaceAsync, NetworkManagerDeviceVethInterfaceAsync, NetworkManagerDeviceVlanInterfaceAsync, NetworkManagerDeviceVrfInterfaceAsync, NetworkManagerDeviceVxlanInterfaceAsync, NetworkManagerDeviceWifiP2PInterfaceAsync, NetworkManagerDeviceWireGuardInterfaceAsync, NetworkManagerDeviceWiredInterfaceAsync, NetworkManagerDeviceWirelessInterfaceAsync, NetworkManagerLoopbackInterfaceAsync, NetworkManagerPPPInterfaceAsync
from .interfaces_other import NetworkManagerAccessPointInterfaceAsync, NetworkManagerCheckpointInterfaceAsync, NetworkManagerConnectionActiveInterfaceAsync, NetworkManagerDHCP4ConfigInterfaceAsync, NetworkManagerDHCP6ConfigInterfaceAsync, NetworkManagerDnsManagerInterfaceAsync, NetworkManagerIP4ConfigInterfaceAsync, NetworkManagerIP6ConfigInterfaceAsync, NetworkManagerInterfaceAsync, NetworkManagerSecretAgentManagerInterfaceAsync, NetworkManagerSettingsConnectionInterfaceAsync, NetworkManagerSettingsInterfaceAsync, NetworkManagerVPNConnectionInterfaceAsync, NetworkManagerWifiP2PPeerInterfaceAsync
from .types import NetworkManagerConnectionProperties

NETWORK_MANAGER_SERVICE_NAME = ...
class NetworkManager(NetworkManagerInterfaceAsync):
    """Network Manager main object

    Implements :py:class:`NetworkManagerInterfaceAsync`

    Service name ``'org.freedesktop.NetworkManager'``
    and object path ``/org/freedesktop/NetworkManager`` is predetermined.
    """
    def __init__(self, bus: Optional[SdBus] = ...) -> None:
        """
        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkManagerAgentManager(NetworkManagerSecretAgentManagerInterfaceAsync):
    """NetworkManager secrets manager

    Implements :py:class:`NetworkManagerSecretAgentManagerInterfaceAsync`.

    Service name ``'org.freedesktop.NetworkManager'``
    and object path ``/org/freedesktop/NetworkManager/AgentManager``
    is predetermined.
    """
    def __init__(self, bus: Optional[SdBus] = ...) -> None:
        """
        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkManagerDnsManager(NetworkManagerDnsManagerInterfaceAsync):
    """NetworkManager DNS manager

    Implements :py:class:`NetworkManagerDnsManagerInterfaceAsync`.

    Service name ``'org.freedesktop.NetworkManager'``
    and object path ``/org/freedesktop/NetworkManager/DnsManager``
    is predetermined.
    """
    def __init__(self, bus: Optional[SdBus] = ...) -> None:
        """
        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkManagerSettings(NetworkManagerSettingsInterfaceAsync):
    """NetworkManager settings

    Implements :py:class:`NetworkManagerSettingsInterfaceAsync`.

    Service name ``'org.freedesktop.NetworkManager'``
    and object path ``/org/freedesktop/NetworkManager/DnsManager``
    is predetermined.
    """
    def __init__(self, bus: Optional[SdBus] = ...) -> None:
        """
        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    
    async def get_connections_by_id(self, connection_id: str) -> List[str]:
        """Helper method to get a list of connection profile paths
        which use the given connection identifier.

        :param str connection_id: The connection identifier of the connections,
                                  e.g. "Wired connection 1"
        :return: List of connection profile paths using the given identifier.
        """
        ...
    
    async def get_settings_by_uuid(self, connection_uuid: str) -> NetworkManagerConnectionProperties:
        """Helper to get a nested settings dict of a connection profile by uuid.

        :param str connection_uuid: The connection uuid of the connection profile
        :return: Nested dictionary of all settings of the given connection profile
        """
        ...
    
    async def delete_connection_by_uuid(self, connection_uuid: str) -> None:
        """Helper to delete a connection profile identified by the connection uuid.

        :param str connection_uuid: The connection uuid of the connection profile
        """
        ...
    


class NetworkConnectionSettings(NetworkManagerSettingsConnectionInterfaceAsync):
    """Setting of specific connection

    Implements :py:class:`NetworkManagerSettingsConnectionInterfaceAsync`
    """
    def __init__(self, settings_path: str, bus: Optional[SdBus] = ...) -> None:
        """
        :param settings_path: D-Bus path to settings object. \
            Usually obtained from \
            :py:attr:`NetworkManagerDeviceInterfaceAsync.active_connection`

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceGeneric(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceGenericInterfaceAsync):
    """Generic device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceGenericInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceWired(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceWiredInterfaceAsync):
    """Ethernet device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceWiredInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceWireless(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceWirelessInterfaceAsync):
    """WiFi device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceWirelessInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceBluetooth(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceBluetoothInterfaceAsync):
    """Bluetooth device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceBluetoothInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceBond(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceBondInterfaceAsync):
    """Bond device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceBondInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceBridge(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceBridgeInterfaceAsync):
    """Bridge device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceBridgeInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceIpTunnel(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceIPTunnelInterfaceAsync):
    """Generic device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceIPTunnelInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceMacsec(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceMacsecInterfaceAsync):
    """Macsec device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceMacsecInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceMacvlan(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceMacvlanInterfaceAsync):
    """Macvlan device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceMacvlanInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceModem(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceModemInterfaceAsync):
    """Generic device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceModemInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceOlpcMesh(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceOlpcMeshInterfaceAsync):
    """OLPC wireless mesh device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceOlpcMeshInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceOpenVSwitchBridge(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceOvsBridgeInterfaceAsync):
    """Open vSwitch bridge device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceOvsBridgeInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceOpenVSwitchPort(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceOvsPortInterfaceAsync):
    """Open vSwitch port device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceOvsPortInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceTeam(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceTeamInterfaceAsync):
    """Team device (special Bond device for NetworkManager)

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceTeamInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceTun(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceTunInterfaceAsync):
    """TUN device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceTunInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceVeth(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceVethInterfaceAsync):
    """Virtual Ethernet device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceVethInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceVlan(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceVlanInterfaceAsync):
    """VLAN device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceVlanInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceVrf(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceVrfInterfaceAsync):
    """VRF (virtual routing) device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceVrfInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceVxlan(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceVxlanInterfaceAsync):
    """VXLAN device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceVxlanInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceWifiP2P(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceWifiP2PInterfaceAsync):
    """Wifi Peer-to-Peer (P2P) device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceWifiP2PInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceWireGuard(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerDeviceWireGuardInterfaceAsync):
    """Generic device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerDeviceWireGuardInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDevicePPP(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerPPPInterfaceAsync):
    """PPP device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerPPPInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class NetworkDeviceLoopback(NetworkManagerDeviceInterfaceAsync, NetworkManagerDeviceStatisticsInterfaceAsync, NetworkManagerLoopbackInterfaceAsync):
    """Loopback device

    Implements :py:class:`NetworkManagerDeviceInterfaceAsync`, \
    :py:class:`NetworkManagerDeviceStatisticsInterfaceAsync` and \
    :py:class:`NetworkManagerLoopbackInterfaceAsync`
    """
    def __init__(self, device_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param device_path: D-Bus path to device object. \
            Obtained from \
            :py:meth:`NetworkManagerInterface.get_devices` or \
            :py:meth:`NetworkManagerInterface.get_device_by_ip_iface`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class ActiveConnection(NetworkManagerConnectionActiveInterfaceAsync):
    """Active connection object

    Implements :py:class:`NetworkManagerConnectionActiveInterfaceAsync`
    """
    def __init__(self, connection_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param connection_path: D-Bus path to connection object. \
            Obtained from \
            :py:meth:`NetworkManagerDeviceInterfaceAsync.active_connection`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class ActiveVPNConnection(ActiveConnection, NetworkManagerVPNConnectionInterfaceAsync):
    """Active VPN connection object

    Implements :py:class:`NetworkManagerConnectionActiveInterfaceAsync`
    and :py:class:`NetworkManagerVPNConnectionInterfaceAsync`
    """
    ...


class IPv4Config(NetworkManagerIP4ConfigInterfaceAsync):
    """IPv4 configuration interface

    Implements :py:class:`NetworkManagerIP4ConfigInterfaceAsync`
    """
    def __init__(self, ip4_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param ip4_path: D-Bus path to IPv4 config object. \
            Obtained from \
            :py:attr:`NetworkManagerDeviceInterfaceAsync.ip4_config`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class IPv6Config(NetworkManagerIP6ConfigInterfaceAsync):
    """IPv6 configuration interface

    Implements :py:class:`NetworkManagerIP6ConfigInterfaceAsync`
    """
    def __init__(self, ip6_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param ip6_path: D-Bus path to IPv6 config object. \
            Obtained from \
            :py:attr:`NetworkManagerDeviceInterfaceAsync.ip4_config`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class DHCPv4Config(NetworkManagerDHCP4ConfigInterfaceAsync):
    """DHCPv4 configuration interface

    Implements :py:class:`NetworkManagerDHCP4ConfigInterfaceAsync`
    """
    def __init__(self, dhcp4_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param dhcp4_path: D-Bus path to DHCPv4 config object. \
            Obtained from \
            :py:attr:`NetworkManagerDeviceInterfaceAsync.dhcp4_config`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class DHCPv6Config(NetworkManagerDHCP6ConfigInterfaceAsync):
    """DHCPv6 configuration interface

    Implements :py:class:`NetworkManagerDHCP6ConfigInterfaceAsync`
    """
    def __init__(self, dhcpv6_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param dhcpv6_path: D-Bus path to DHCPv6 config object. \
            Obtained from \
            :py:attr:`NetworkManagerDeviceInterfaceAsync.dhcp6_config`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class AccessPoint(NetworkManagerAccessPointInterfaceAsync):
    """Access Point (WiFi point) object

    Implements :py:class:`NetworkManagerAccessPointInterfaceAsync`
    """
    def __init__(self, point_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param point_path: D-Bus path to access point object. \
            Obtained from \
            :py:attr:`NetworkManagerDeviceWirelessInterfaceAsync.access_points`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class WiFiP2PPeer(NetworkManagerWifiP2PPeerInterfaceAsync):
    """WiFi peer object

    Implements :py:class:`NetworkManagerWifiP2PPeerInterfaceAsync`
    """
    def __init__(self, peer_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param peer_path: D-Bus path to access point object. \
            Obtained from \
            :py:attr:`NetworkManagerDeviceWifiP2PInterfaceAsync.peers`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


class ConfigCheckpoint(NetworkManagerCheckpointInterfaceAsync):
    """Configuration checkpoint interface

    Implements :py:class:`NetworkManagerCheckpointInterfaceAsync`
    """
    def __init__(self, checkpoint_path: str, bus: Optional[SdBus] = ...) -> None:
        """

        :param checkpoint_path: D-Bus path to access point object. \
            Obtained from \
            :py:attr:`NetworkManagerDeviceWifiP2PInterfaceAsync.checkpoint_create`.

        :param bus: You probably want to set default bus to system bus \
            or pass system bus directly.
        """
        ...
    


