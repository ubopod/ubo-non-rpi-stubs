"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import List, Optional
from .base import NetworkManagerSettingsMixin

@dataclass
class AddressData(NetworkManagerSettingsMixin):
    address: str = ...
    prefix: int = ...


@dataclass
class RouteData(NetworkManagerSettingsMixin):
    dest: str = ...
    prefix: int = ...
    next_hop: Optional[str] = ...
    metric: Optional[int] = ...


@dataclass
class LinkWatchers(NetworkManagerSettingsMixin):
    """
    Link watchers configuration for the connection: each link watcher is
    defined by a dictionary, whose keys depend upon the selected link watcher.
    Available link watchers are 'ethtool', 'nsna_ping' and 'arp_ping' and it
    is specified in the dictionary with the key 'name'.
    Available keys are: ethtool: 'delay-up', 'delay-down', 'init-wait';
    nsna_ping: 'init-wait', 'interval', 'missed-max', 'target-host';
    arp_ping: all the ones in nsna_ping and 'source-host', 'validate-active',
    'validate-inactive', 'send-always'. See teamd.conf man for more details
    """
    name: str = ...
    delay_up: Optional[int] = ...
    delay_down: Optional[int] = ...
    init_wait: Optional[int] = ...
    interval: Optional[int] = ...
    missed_max: Optional[int] = ...
    source_host: Optional[str] = ...
    target_host: Optional[str] = ...
    validate_active: Optional[bool] = ...
    validate_inactive: Optional[bool] = ...
    send_alway: Optional[bool] = ...


@dataclass
class Vlans(NetworkManagerSettingsMixin):
    """
    VLAN filtering in linux bridge connection attributes
    For background info, see the development of the merge:
    https://bugzilla.redhat.com/show_bug.cgi?id=1652910
    """
    vid_start: int = ...
    vid_end: int = ...
    pvid: Optional[bool] = ...
    untagged: Optional[bool] = ...


@dataclass
class WireguardPeers(NetworkManagerSettingsMixin):
    public_key: Optional[str] = ...
    endpoint: Optional[int] = ...
    allowed_ips: Optional[List[str]] = ...


@dataclass
class RoutingRules(NetworkManagerSettingsMixin):
    action: Optional[int] = ...
    dport_end: Optional[int] = ...
    dport_start: Optional[int] = ...
    family: Optional[int] = ...
    from_prefix: Optional[str] = ...
    from_len: Optional[int] = ...
    fwmark: Optional[int] = ...
    fwmask: Optional[int] = ...
    iifname: Optional[str] = ...
    invert: Optional[bool] = ...
    ipproto: Optional[str] = ...
    oifname: Optional[str] = ...
    priority: Optional[int] = ...
    sport_end: Optional[int] = ...
    sport_start: Optional[int] = ...
    supress_prefixlength: Optional[int] = ...
    table: Optional[int] = ...
    to: Optional[str] = ...
    tos: Optional[int] = ...
    to_len: Optional[int] = ...
    range_end: Optional[int] = ...
    range_start: Optional[int] = ...


@dataclass
class Vfs(NetworkManagerSettingsMixin):
    index: str = ...
    mac: Optional[str] = ...
    spoof_check: Optional[str] = ...
    trust: Optional[str] = ...
    min_tx_rate: Optional[str] = ...
    max_tx_rate: Optional[str] = ...
    vlans: Optional[str] = ...


@dataclass
class Qdiscs(NetworkManagerSettingsMixin):
    ...


@dataclass
class Tfilters(NetworkManagerSettingsMixin):
    ...


